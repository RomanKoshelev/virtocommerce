@using VirtoCommerce.Foundation.Orders.Model
@model VirtoCommerce.Foundation.Orders.Model.Order

@{
    var statusClass = Model.Status.ToLower();
    OrderStatus status;
    if (Enum.TryParse(Model.Status, out status))
    {
        switch (status)
        {
            case OrderStatus.AwaitingExchange:
            case OrderStatus.InProgress:
            case OrderStatus.OnHold:
            case OrderStatus.PartiallyShipped:
                statusClass = "progress";
                break;
            case OrderStatus.Cancelled:
                statusClass = "pending";
                break;

            default:
                statusClass = Model.Status.ToLower();
                break;

        }
    }
}
<tr>
    <td>
        <span class="mobile-view">@("Order".Localize())</span>
        <span>@Model.TrackingNumber</span>
    </td>
    <td>
        <span class="mobile-view">@("Date".Localize())</span>
        <span>@Model.Created.Value.ToShortDateString()</span>
    </td>
    <td>
        <span class="mobile-view">@("Ship to".Localize())</span>
        <span>@Model.CustomerName</span>
    </td>
    <td>
        <span class="mobile-view">@("Order total".Localize())</span>
        <span>@StoreHelper.FormatCurrency(Model.Total, Model.BillingCurrency)</span>
    </td>
    <td>
        <span class="mobile-view">@("Order status".Localize())</span>
        <span class="@statusClass">@Model.Status.Localize()</span>
    </td>
    <td class="product-actions">
        @Html.ActionLink("View", "ViewOrder", new { orderId = Model.OrderGroupId }, new { @class = "view" })
        @Html.ActionLink("Reorder", "Reorder", new { orderId = Model.OrderGroupId }, new { @class = "reorder" })
        @Html.ActionLink("Return", "OrderReturn", new { orderId = Model.OrderGroupId }, new { @class = "return" })
    </td>
</tr>
