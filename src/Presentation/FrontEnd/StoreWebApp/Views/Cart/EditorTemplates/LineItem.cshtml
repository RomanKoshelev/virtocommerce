@using VirtoCommerce.Foundation.Frameworks.Extensions
@model LineItemModel
@{
    var itemUrl = Url.ItemUrl(Model.CatalogItem.Item, Model.ParentCatalogItem);
}
<tr  id="@String.Format("row-{0}", Model.LineItem.LineItemId)">
    <td class="product-image">
        @Html.HiddenFor(x => x.LineItemId)
        <a href="@itemUrl" title="@Model.DisplayName" class="product-image">
            <img src="@Url.Image(Model.CatalogItem.Item, "primaryimage")" alt="@Model.DisplayName" onerror="this.onerror=null;this.src='@Href("~/Content/themes/default/images/blank.png")';" />

        </a>
    </td>
    <td class="product-name">
        <h2>
            <a href="@itemUrl">@Model.DisplayName</a>
        </h2>
        @if (Model.LineItem.Options != null && Model.LineItem.Options.Count > 0)
        { 
            <dl class="item-options">
                @foreach (var option in Model.LineItem.Options)
                { 
                    <dt>@option.OptionName</dt>
                    <dd>
                        @option.OptionValue
                    </dd>
                }
            </dl>
        }
        @if (Model.LineItem.Discounts != null && Model.LineItem.Discounts.Count > 0)
        {
            <dl class="item-options">
                <dt>@("Discounts:".Localize())</dt>
                @foreach (var discount in Model.LineItem.Discounts)
                { 
                    <dd>@discount.DisplayMessage</dd>
                }
            </dl>
        }
    </td>
    <td class="product-edit">
        @if (!Model.IsPromotion)
        {
            @Html.ActionLink("Edit".Localize(), "Configure", new { lineItemId = Model.LineItemId }, new { title = "Edit item parameters".Localize() })
        }
    </td>
    <td class="product-price">
        <span class="mobile-view">@("Unit Price".Localize())</span>
        <span class="price">@Model.FormattedPlacedPrice</span>
    </td>
    <td class="product-qty">
        <span class="mobile-view">@("Quantity".Localize())</span>
        @if (!Model.IsPromotion)
        {
            var min = (int)Math.Min(Model.LineItem.MinQuantity, Model.LineItem.MaxQuantity);
            var max = (int)Math.Max(Model.LineItem.MinQuantity, Model.LineItem.MaxQuantity);
            min = min > 0 ? min : 1;
            max = max > 0 ? max : 1;
            @Html.TextBoxFor(x => x.Quantity, new
            {
               @class = "input-text qty",
               maxlength = "12",
               size = "4",
               data_val_required = "The quantity field is required.".Localize(),
               data_val_range_min = min,
               data_val_range_max = max,
               data_val_range = "Select quantity in range".Localize() + string.Format("{0:#} - {1:#}", min, max),
               data_val_regex_pattern = string.Format(@"^\d{{{0},{1}}}$", min.DigitCount(), max.DigitCount()),
               data_val_regex = "Quantity must be a positive integer".Localize(),
               data_val = "true"
            })

            @Html.ValidationMessageFor(x => x.Quantity)
        }
        else
        {
            @Html.TextBoxFor(x => x.Quantity, new { @class = "input-text qty", maxlength = "12", size = "4", disabled = "disabled" })
            @Html.HiddenFor(x => x.Quantity)
        }
    </td>
    <td class="product-price">
        <span class="mobile-view">@("Subtotal".Localize())</span>
        <span class="price">@Model.FormattedExtendedPrice</span>
    </td>
    <td class="product-actions">
        @Html.ActionLink("Edit".Localize(), "Configure", new { lineItemId = Model.LineItemId }, new { title = "Edit item parameters".Localize(), @class = "edit" })
        @if (!Model.IsPromotion)
        {
            @Ajax.ActionLink("Remove item".Localize(), "Remove", new { lineItemId = Model.LineItemId },
           new AjaxOptions
           {
               HttpMethod = "POST",
               Confirm = "Are you sure you would like to remove this item from the shopping cart?".Localize(),
               OnSuccess = "VirtoCart.onUpdate"
           }, new { @class = "trash" })
        }
    </td>
</tr>
