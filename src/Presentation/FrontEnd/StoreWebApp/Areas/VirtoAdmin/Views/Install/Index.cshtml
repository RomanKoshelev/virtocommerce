@using VirtoCommerce.Web
@using VirtoCommerce.Web.Areas.VirtoAdmin.Models
@using Resource = VirtoCommerce.Web.Areas.VirtoAdmin.Resources.Resource;
@model InstallModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@Resource.InstallPageTitle</title>
    <link href="~/Areas/VirtoAdmin/Content/site.css" rel="stylesheet" type="text/css" media="all" />
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/admin")

    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    <script type="text/javascript">
        $(function ()
        {
            //Enable logging
            //$.connection.hub.logging = true;
            $.connection.hub.connectionSlow(function ()
            {
                //$(".console").append('<p style="color:red">Hub: slow connection...</p>');
            });
            $.connection.hub.reconnecting(function ()
            {
                //$(".console").append('<p style="color:red">Hub: reconnecting...</p>');
            });
            $.connection.hub.reconnected(function ()
            {
                //$(".console").append('<p style="color:green">Hub: reconnected...</p>');
            });
            $.connection.hub.disconnected(function ()
            {
                //$(".console").append('<p style="color:red">Hub: diconected...</p>');
            });
            // Declare a proxy to reference the hub. 
            var setup = $.connection.setupWorker;

            // Create a function that the hub can call to broadcast messages.
            setup.client.traceMessage = function (message, newLine)
            {
                if (newLine)
                {
                    $(".console").append("<br/><br/>");
                } else
                {
                    $(".console").append("<br/>");
                }
                $(".console").append(message);
                $(".console").animate({ scrollTop: $(".console")[0].scrollHeight }, 'fast');
            };
            
            setup.client.friendlyMessage = function (message) {
                setup.client.traceMessage(message, true);
                $('#setUpHeader').text(message);
            };

            setup.client.success = function (message)
            {
                $.redirect('@Url.Action("Complete")');
            };

            setup.client.failure = function (message)
            {
                $("#throbber").hide();
                $("button[type='submit']").removeAttr("disabled");
                $(".validation-summary-errors").append("<p>" + message + "</p>");
                $(".validation-summary-errors").show();
            };

            // Start the connection.
            $.connection.hub.start({ transport: ['serverSentEvents', 'longPolling'] }).done(function ()
            {
                //Make submit in ajax
                $('form').submit(function () {
                    $("#SubmitButton").attr("disabled", "disabled");
                    var validator = $(this).validate();
                    var model = $(this).serializeObject();
                    if (validator.valid())
                    {
                        $("#throbber").show();
                        $(".console").empty();
                        $(".console").show();
                        $(".validation-summary-errors").empty();
                        $.ajax({
                            url: this.action,
                            type: this.method,
                            data: $(this).serialize(),
                            timeout: 60000,//1min
                            success: function (result)
                            {
                                if (result.Success)
                                {
                                    //The time out is needed for connection to be established with signalR
                                    window.setTimeout(function ()
                                    {

                                        function waitForConnection()
                                        {
                                            if ($.connection.hub.state != $.connection.connectionState.connected)
                                            {
                                                window.setTimeout(waitForConnection(), 100);
                                            } else
                                            {
                                                setup.server.doWork(model);
                                            }
                                        }
                                        waitForConnection();
                                    }, 1000);

                                } else
                                {
                                    $(".console").show();
                                    $("#throbber").hide();
                                    $(".validation-summary-errors").append("<p>" + result.Message + "</p>");
                                    $(".validation-summary-errors").show();
                                }
                            },
                            error: function (jqXhr, t)
                            {
                                $(".console").show();
                                $("#throbber").hide();
                                $("button[type='submit']").removeAttr("disabled");

                                if (t === "timeout")
                                {
                                    alert("Timeout!");
                                }
                                else
                                {

                                    VirtoCommerce.extractErrors(jqXhr, validator);
                                }
                            }
                        });
                    }
                    $("#SubmitButton").removeAttr("disabled");
                    return false;
                });
            });

        });
    </script>
</head>
<body>
    <div id="header">
        <div id="branding">
            <h1>Virto Commerce</h1>
        </div>
    </div>
    <div id="main">
        <div class="zone zone-content">
            <h1>Get Started</h1>

            <div>
                @using (Html.BeginForm("Index", "Install", new { area = "VirtoAdmin" }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <h2>Database setup</h2>
                    <div id="inprogress" />
                        
                    <div class="message-Information" style="display: none;">
                    </div>

                    <div class="validation-summary-errors" style="display: none;">
                    </div>
                        
                    <fieldset class="data">
                        @if (Model.DbAdminRequired)
                        {
                            @Html.HiddenFor(m => m.DbAdminRequired)
                            <div>
                                @Html.LabelFor(m => m.DbAdminUser)
                                @Html.TextBoxFor(m => m.DbAdminUser)
                                @Html.Label(Resource.DbAdminUserTip, new { @class = "hint" })
                                @Html.ValidationMessageFor(m => m.DbAdminUser)
                            </div>
                            <div>
                                @Html.LabelFor(m => m.DbAdminPassword)
                                @Html.PasswordFor(m => m.DbAdminPassword)
                                @Html.Label(Resource.DbAdminPasswordTip, new { @class = "hint" })
                                @Html.ValidationMessageFor(m => m.DbAdminPassword)
                            </div>
                        }
                        <div>
                            @Html.LabelFor(m => m.DataSource)
                            @Html.TextBoxFor(m => m.DataSource)
                            @Html.Label(Resource.DataSourceTip, new { @class = "hint" })
                            @Html.ValidationMessageFor(m => m.DataSource)
                        </div>
                        <div>
                            @Html.LabelFor(m => m.InitialCatalog)
                            @Html.TextBoxFor(m => m.InitialCatalog)
                            @Html.Label(Resource.InitialCatalogTip, new { @class = "hint" })
                            @Html.ValidationMessageFor(m => m.InitialCatalog)
                        </div>
                        <div>
                            @Html.LabelFor(m => m.DbUserName)
                            @Html.TextBoxFor(m => m.DbUserName)
                            @Html.Label(Resource.DbUserNameTip, new { @class = "hint" })
                            @Html.ValidationMessageFor(m => m.DbUserName)
                        </div>
                        <div>
                            @Html.LabelFor(m => m.DbUserPassword)
                            @Html.PasswordFor(m => m.DbUserPassword, new { value = Model.DbUserPassword })
                            @Html.Label(Resource.DbUserPasswordTip, new { @class = "hint" })
                            @Html.ValidationMessageFor(m => m.DbUserPassword)
                        </div>
                        <div>
                            @Html.LabelFor(m => m.SetupSampleData)
                            <input id="SetupSampleData" name="SetupSampleData" 
                                   type="checkbox" value="@Model.SetupSampleData.ToString()"
                                @(Model.SetupSampleData ? "checked=checked" : string.Empty)>
                        </div>
                        <div>
                            <button name="SubmitButton" type="submit" value="CreateDb">@Resource.SetupDatabase</button>
                        </div>
                    </fieldset>
                }
            </div>
        </div>
    </div>
    <div class="console">
    </div>
    <div id="throbber">
        <div class="curtain"></div>
        <div class="curtain-content">
            <div class="progress">
                <h1 id="setUpHeader">@Resource.LongProcessMessage</h1>
                <p>
                    <img src="@Href("../../content/images/inprogress.gif")" alt="" />
                </p>
            </div>
        </div>
    </div>
</body>
</html>
