<UserControl x:Class="VirtoCommerce.ManagementClient.Core.Controls.ExpressionBuilder"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:system="clr-namespace:System;assembly=mscorlib"
            xmlns:extToolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
            xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity" 
            xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
            xmlns:core_controls="clr-namespace:VirtoCommerce.ManagementClient.Core.Controls"
            xmlns:core_Converters="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Converters"
            mc:Ignorable="d"
        MinHeight="60" d:DesignWidth="300">
    <UserControl.Resources>
        <core_Converters:VisibilityConverter x:Key="visibilityConverter" />

        <ItemsPanelTemplate x:Key="LeftOrientedItemsPanelTemplate">
            <DockPanel HorizontalAlignment="Left" />
        </ItemsPanelTemplate>

        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="Margin" Value="0"/>
            <Setter Property="FontSize" Value="13"/>
        </Style>
        <Style x:Key="Virto_WatermarkTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="#787878"/>
            <Setter Property="Margin" Value="3,0"/>
            <Setter Property="FontSize" Value="13"/>
        </Style>
        <Style x:Key="Expression_AddingTextBlock_Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Margin" Value="3,3,3,0"/>
            <Setter Property="Foreground" Value="#727373" />
            <Setter Property="FontStyle" Value="Italic" />
            <Setter Property="TextWrapping" Value="NoWrap" />
            <Setter Property="TextTrimming" Value="WordEllipsis" />
            <Setter Property="MaxWidth" Value="300" />
            <!--<Setter Property="TextBlock.TextDecorations">
                <Setter.Value>
                    <TextDecorationCollection>
                        <TextDecoration PenOffset="4">
                            <TextDecoration.Pen>
                                <Pen Thickness="1" Brush="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=TextBlock}}" >
                                    <Pen.DashStyle>
                                        <DashStyle Dashes="0,4"/>
                                    </Pen.DashStyle>
                                </Pen>
                            </TextDecoration.Pen>
                        </TextDecoration>
                    </TextDecorationCollection>
                </Setter.Value>
            </Setter>-->
        </Style>

        <Style x:Key="Expression_ErrorTextBlock_Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Margin" Value="3,3,3,0"/>
            <Setter Property="Foreground" Value="Red" />
            <Setter Property="FontStyle" Value="Italic" />
            <Setter Property="TextWrapping" Value="NoWrap" />
            <Setter Property="TextTrimming" Value="WordEllipsis" />
            <Setter Property="MaxWidth" Value="300" />
        </Style>

        <Style x:Key="Expression_SelectionTextBlock_Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Expression_AddingTextBlock_Style}">
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Margin" Value="3,0"/>
            <Setter Property="Foreground" Value="#006987" />
            <!--<Setter Property="FontFamily" Value="Century Gothic" />-->
            <Setter Property="FontStyle" Value="Normal" />
        </Style>

        <!--BasedOn="{StaticResource Virto_AlternateWatermarkedTextBox_Style}-->
        <Style TargetType="{x:Type core_controls:WatermarkedTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Height" Value="24" />
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type core_controls:WatermarkedTextBox}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Grid Margin="7,0,0,0" ClipToBounds="True">
                                <ScrollViewer x:Name="PART_ContentHost" />
                                <TextBlock x:Name="WatermarkText" Text="{TemplateBinding WatermarkText}" Margin="3,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"  
                                           IsHitTestVisible="False" Style="{StaticResource Virto_WatermarkTextBlockStyle}" Visibility="Collapsed"  FontSize="13"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasText" Value="False">
                                <Setter Property="Visibility" TargetName="WatermarkText" Value="Visible" />
                                <Setter Property="Background" Value="#EEEEEE"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="false">
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="Foreground" Value="#006987" />
                                <Setter Property="FontSize" Value="13" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter Property="Visibility" TargetName="WatermarkText" Value="Collapsed" />
                                <Setter Property="Background" Value="#FAFAFA"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="false">
                    <Setter Property="BorderThickness" Value="0" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="ButtonSpinner_ControlTemplate" TargetType="{x:Type extToolkit:ButtonSpinner}">
            <Grid>
                <Border x:Name="ElementContainer" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
					Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="0">
                    <DockPanel Focusable="False">
                        <Grid DockPanel.Dock="Right" Visibility="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static core_Converters:ToVisibilityConverter.Current}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <RepeatButton x:Name="PART_IncreaseButton" ClickMode="Press" Cursor="Hand" IsTabStop="{Binding IsTabStop, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" SnapsToDevicePixels="True">
                                <RepeatButton.Template>
                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </ControlTemplate>
                                </RepeatButton.Template>
                                <Grid Background="Transparent">
                                    <!--<Microsoft_Windows_Controls_Chromes:ButtonChrome CornerRadius="0" RenderMouseOver="{Binding IsMouseOver, ElementName=IncreaseButton}" RenderPressed="{Binding IsPressed, ElementName=IncreaseButton}" RenderEnabled="{TemplateBinding IsEnabled}"/>-->
                                    <ContentControl Focusable="False" Margin="5,1">
                                        <ContentControl.ContentTemplate>
                                            <DataTemplate>
                                                <Path Fill="Black" Height="4" Width="7" 
												  Data="M0,3C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3z"/>
                                            </DataTemplate>
                                        </ContentControl.ContentTemplate>
                                    </ContentControl>
                                </Grid>
                            </RepeatButton>
                            <RepeatButton x:Name="PART_DecreaseButton" ClickMode="Press" Cursor="Hand" IsTabStop="{Binding IsTabStop, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="2" SnapsToDevicePixels="True">
                                <RepeatButton.Template>
                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </ControlTemplate>
                                </RepeatButton.Template>
                                <Grid Background="Transparent">
                                    <!--<Microsoft_Windows_Controls_Chromes:ButtonChrome CornerRadius="0" RenderMouseOver="{Binding IsMouseOver, ElementName=DecreaseButton}" RenderPressed="{Binding IsPressed, ElementName=DecreaseButton}" RenderEnabled="{TemplateBinding IsEnabled}" BorderThickness="1,0,1,1"/>-->
                                    <ContentControl Focusable="False" Margin="5,1">
                                        <ContentControl.ContentTemplate>
                                            <DataTemplate>
                                                <Path Fill="Black" Height="4" Width="7"
												  Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z"/>
                                            </DataTemplate>
                                        </ContentControl.ContentTemplate>
                                    </ContentControl>
                                </Grid>
                            </RepeatButton>
                        </Grid>
                        <ContentControl x:Name="presentationSite" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </DockPanel>
                </Border>
            </Grid>
        </ControlTemplate>


        <Style TargetType="{x:Type extToolkit:IntegerUpDown}">
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extToolkit:IntegerUpDown}}}" 
                                        FontSize="13" Margin="0,-2,0,0" Focusable="False"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="#FF1BA1E2"/>
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                    <Setter Property="FontSize" Value="13"/>
                    <Setter Property="HorizontalContentAlignment" Value="Right"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Control}">
                                <extToolkit:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" 
											  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
											  IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" 
											  Template="{StaticResource ButtonSpinner_ControlTemplate}" BorderBrush="{TemplateBinding BorderBrush}" >
                                    <extToolkit:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="{TemplateBinding Background}" 
                                                                 Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                                                 FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                                                 FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" 
                                                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20" 
                                                                 TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}">
                                        <extToolkit:WatermarkTextBox.IsReadOnly>
                                            <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}" Converter="{x:Static core_Converters:ToVisibilityConverter.Current}" ConverterParameter='i'>
                                            </Binding>
                                        </extToolkit:WatermarkTextBox.IsReadOnly>
                                    </extToolkit:WatermarkTextBox>
                                </extToolkit:ButtonSpinner>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsKeyboardFocusWithin" Value="false">
                                        <Setter Property="Foreground" Value="#006987" />
                                        <Setter Property="FontSize" Value="13" />
                                        <!--must adjust Height in order the decorations to be visible-->
                                        <Setter TargetName="PART_TextBox" Property="Height" Value="23" />

                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="false">
                    <Setter Property="ShowButtonSpinner" Value="False" />
                    <Setter Property="BorderThickness" Value="0" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFF7F7F0"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type extToolkit:DoubleUpDown}">
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extToolkit:DoubleUpDown}}}" 
                                        FontSize="13" Margin="0,-2,0,0" Focusable="False"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="#FF1BA1E2"/>
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                    <Setter Property="FontSize" Value="13"/>
                    <Setter Property="HorizontalContentAlignment" Value="Right"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Control}">
                                <extToolkit:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" 
											  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
											  IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" 
											  Template="{StaticResource ButtonSpinner_ControlTemplate}" BorderBrush="{TemplateBinding BorderBrush}" >
                                    <extToolkit:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="{TemplateBinding Background}" 
                                                                 Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                                                 FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                                                 FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" 
                                                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20" 
                                                                 TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}">
                                        <extToolkit:WatermarkTextBox.IsReadOnly>
                                            <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}" Converter="{x:Static core_Converters:ToVisibilityConverter.Current}" ConverterParameter='i'>
                                            </Binding>
                                        </extToolkit:WatermarkTextBox.IsReadOnly>
                                    </extToolkit:WatermarkTextBox>
                                </extToolkit:ButtonSpinner>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsKeyboardFocusWithin" Value="false">
                                        <Setter Property="Foreground" Value="#006987" />
                                        <Setter Property="FontSize" Value="13" />
                                        <!--must adjust Height in order the decorations to be visible-->
                                        <Setter TargetName="PART_TextBox" Property="Height" Value="23" />

                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="false">
                    <Setter Property="ShowButtonSpinner" Value="False" />
                    <Setter Property="BorderThickness" Value="0" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFF7F7F0"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type extToolkit:DecimalUpDown}">
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extToolkit:DecimalUpDown}}}" 
                                        FontSize="13" Margin="0,-2,0,0" Focusable="False"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="#FF1BA1E2"/>
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                    <Setter Property="FontSize" Value="13"/>
                    <Setter Property="HorizontalContentAlignment" Value="Right"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Control}">
                                <extToolkit:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" 
											  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
											  IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" 
											  Template="{StaticResource ButtonSpinner_ControlTemplate}" BorderBrush="{TemplateBinding BorderBrush}" >
                                    <extToolkit:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="{TemplateBinding Background}" 
                                                                 Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                                                 FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                                                 FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" 
                                                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20" 
                                                                 TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                 Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}">
                                        <extToolkit:WatermarkTextBox.IsReadOnly>
                                            <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}" Converter="{x:Static core_Converters:ToVisibilityConverter.Current}" ConverterParameter='i'>
                                            </Binding>
                                        </extToolkit:WatermarkTextBox.IsReadOnly>
                                    </extToolkit:WatermarkTextBox>
                                </extToolkit:ButtonSpinner>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsKeyboardFocusWithin" Value="false">
                                        <Setter Property="Foreground" Value="#006987" />
                                        <Setter Property="FontSize" Value="13" />
                                        <!--must adjust Height in order the decorations to be visible-->
                                        <Setter TargetName="PART_TextBox" Property="Height" Value="23" />

                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="false">
                    <Setter Property="ShowButtonSpinner" Value="False" />
                    <Setter Property="BorderThickness" Value="0" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFF7F7F0"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="False">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBox">
                                <Border Padding="{TemplateBinding Padding}" BorderThickness="1" BorderBrush="Transparent" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="Transparent">
                                    <TextBlock Text="{Binding Path=InputValue}" Margin="0,0,5,0"
                                               Style="{StaticResource Expression_SelectionTextBlock_Style}"
                                               VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Virto_Button_Transparent_Style" TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Margin" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="{TemplateBinding Padding}" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Foreground" Value="{DynamicResource Virto_Button_Foreground_MouseOver_Brush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="Bd" Value="0.3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <Grid>
        <ContentControl Content="{Binding RootExpression, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type core_controls:ExpressionBuilder}}}" ContentTemplate="{DynamicResource ChildElements_DataTemplate}" Margin="3,0">
            <ContentControl.Resources>

                <Style TargetType="Button" BasedOn="{StaticResource Virto_Button_Transparent_Style}">
                    <Setter Property="Margin" Value="0,-2,5,0" />
                    <Setter Property="VerticalAlignment" Value="Top" />
                    <Setter Property="HorizontalAlignment" Value="Left" />
                    <Setter Property="Visibility" Value='{Binding IsAllowChildren, Converter={x:Static core_Converters:ToVisibilityConverter.Current}}' />
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu ItemsSource="{Binding AvailableChildren}">
                                <ContextMenu.ItemContainerStyle>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="Header" Value="{Binding DisplayName}"/>
                                        <Setter Property="ItemsSource" Value="{Binding AvailableChildren}"/>
                                        <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext}"/>
                                        <EventSetter Event="Click" Handler="AddNewExpression_Click" />
                                    </Style>
                                </ContextMenu.ItemContainerStyle>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Content" Value="+ add something" />
                </Style>

                <DataTemplate DataType="{x:Type core_controls:LabelElement}">
                    <Grid Height="27">
                        <TextBlock Text="{Binding Label}" FontWeight="DemiBold" Margin="0,-2,5,0" FontSize="13" VerticalAlignment="Center" />
                    </Grid>
                </DataTemplate>

                <DataTemplate DataType="{x:Type core_controls:CustomDictionaryElement}">
                    <core_controls:NullItemSelectorAdapter ItemsSource="{Binding AvailableValues}" NullItems="{Binding DefaultValue}" IsAddingNullItemsFirst="True" 
                                                           Width="Auto" HorizontalAlignment="Stretch" Height="27" Margin="0,0,0,0" Padding="0">
                        <ComboBox SelectedValue="{Binding InputValue, Mode=TwoWay}" x:Name="cbControl" Height="Auto" Margin="0" Padding="5,2">
                            <!-- PreviewTextInput="CustomDictionaryElement_TextInput">-->
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid x:Name="textGrid" Margin="0">
                                        <TextBlock x:Name="textBlock" Text="{Binding }" FontSize="13"  VerticalAlignment="Center" Margin="0,0,0,0" Padding="0" />
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <!--<Condition Binding="{Binding Text, ElementName=textBlock}" Value="{Binding DefaultValue}" />-->
                                                <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <!--<Setter TargetName="textBlock" Property="FontStyle" Value="Italic" />-->
                                        </MultiDataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </core_controls:NullItemSelectorAdapter>
                </DataTemplate>

                <DataTemplate DataType="{x:Type core_controls:KeyValueDictionaryElement}">
                    <Button Margin="0">
                        <Grid  VerticalAlignment="Center" Height="27">
                            <TextBlock Text="{Binding InputDisplayName}" Style="{StaticResource Expression_SelectionTextBlock_Style}" FontWeight="DemiBold" FontSize="13" Margin="0,-2,0,0" VerticalAlignment="Center" />
                        </Grid>

                        <Button.ContextMenu>
                            <ContextMenu ItemsSource="{Binding AvailableValues}">
                                <ContextMenu.Style>
                                    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
                                        <Style.Triggers>
                                            <Trigger Property="HasItems" Value="False">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Border Background="{DynamicResource Virto_ContextMenu_Background_Brush}" BorderThickness="1" BorderBrush="{DynamicResource Virto_ContextMenu_Border_Background_Brush}" >
                                                                <TextBlock Text="No available values found. Define them in Settings first." FontSize="14" FontWeight="DemiBold" Margin="10,4" />
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContextMenu.Style>
                                <ContextMenu.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Value}" />
                                    </DataTemplate>
                                </ContextMenu.ItemTemplate>
                                <ContextMenu.ItemContainerStyle>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <EventSetter Event="Click" Handler="SelectDictNewValue_Click" />
                                    </Style>
                                </ContextMenu.ItemContainerStyle>
                            </ContextMenu>
                        </Button.ContextMenu>

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}" PropertyName="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Mode=OneWay}"/>
                                <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}" PropertyName="IsOpen" Value="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </DataTemplate>

                <!--all, any (first line)-->
                <DataTemplate DataType="{x:Type core_controls:DictionaryElement}">
                    <Button Margin="0"  >
                        <Grid  VerticalAlignment="Center" Height="27">
                            <TextBlock Text="{Binding InputValue}" Style="{StaticResource Expression_SelectionTextBlock_Style}" FontWeight="DemiBold" 
                                       Margin="0,-2,5,0" FontSize="13" VerticalAlignment="Center" />
                        </Grid>

                        <Button.ContextMenu>
                            <ContextMenu ItemsSource="{Binding AvailableValues}">
                                <ContextMenu.ItemContainerStyle>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <EventSetter Event="Click" Handler="SelectNewValue_Click" />
                                    </Style>
                                </ContextMenu.ItemContainerStyle>
                            </ContextMenu>
                        </Button.ContextMenu>

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}" PropertyName="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Mode=OneWay}"/>
                                <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}" PropertyName="IsOpen" Value="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </DataTemplate>

                <DataTemplate DataType="{x:Type core_controls:UserInputElement}">
                    <DataTemplate.Resources>
                        <DataTemplate DataType="{x:Type system:Int32}">
                            <extToolkit:IntegerUpDown Value="{Binding DataContext.InputValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Mode=TwoWay}" Minimum="{Binding DataContext.MinValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Maximum="{Binding DataContext.MaxValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Height="27" Width="50" Margin="0,-1,5,0" VerticalAlignment="Top" />
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type system:Double}">
                            <extToolkit:DoubleUpDown Increment="0.5" Width="Auto" Value="{Binding DataContext.InputValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Mode=TwoWay}" Minimum="{Binding DataContext.MinValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Maximum="{Binding DataContext.MaxValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Height="27" Margin="0,0,5,0" VerticalAlignment="Top" />
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type system:Decimal}">
                            <extToolkit:DecimalUpDown Increment="0.5" Width="Auto" Value="{Binding DataContext.InputValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Mode=TwoWay}" Minimum="{Binding DataContext.MinValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Maximum="{Binding DataContext.MaxValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" Height="27" Margin="0,0,5,0" VerticalAlignment="Top" />
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type system:DateTime}">
                            <DatePicker SelectedDate="{Binding DataContext.InputValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Mode=TwoWay}" Style="{DynamicResource {x:Type DatePicker}}" Height="27" Margin="0,0,5,0" VerticalAlignment="Top" />
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type system:String}">
                            <core_controls:WatermarkedTextBox Width="Auto" Text="{Binding DataContext.InputValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Mode=TwoWay}" Height="27" Margin="0,0,5,0" VerticalAlignment="Top" WatermarkText="Enter value..."/>
                        </DataTemplate>
                    </DataTemplate.Resources>
                    <ContentControl Content="{Binding InputValue}" />
                </DataTemplate>

                <!--Template for elements in expression header -->
                <DataTemplate x:Key="HeaderElements_DataTemplate">
                    <DataTemplate.Resources>
                        <DataTemplate DataType="{x:Type core_controls:CompositeElement}">
                            <StackPanel Margin="3,0,0,0">
                                <ItemsControl ItemsSource="{Binding HeaderElements}" ItemsPanel="{StaticResource LeftOrientedItemsPanelTemplate}" />

                                <!--ItemsControl is an extremely special container as it's Datacontext is parent element-->
                                <ItemsControl ItemsSource="{Binding Children}" Margin="10,0" ItemTemplate="{DynamicResource ChildElements_DataTemplate}" VerticalAlignment="Top" />

                                <!--+ add something-->
                                <Button>
                                    <TextBlock Text="{Binding NewChildLabel}" Style="{StaticResource Expression_AddingTextBlock_Style}" FontSize="13"/>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" PropertyName="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=OneWay}"/>
                                            <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" PropertyName="IsOpen" Value="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Button>
                            </StackPanel>
                        </DataTemplate>
                    </DataTemplate.Resources>


                    <ContentControl Content="{Binding }" />
                </DataTemplate>

                <!-- начало с кнопкой текстом + контайнер конец с кнопкой add something-->
                <DataTemplate x:Key="ChildElements_DataTemplate" DataType="{x:Type core_controls:CompositeElement}" >
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Button Margin="0,0,5,0" Visibility="{Binding IsAllowChildren, Converter={StaticResource visibilityConverter}, ConverterParameter='False'}"  
                                    Command="{Binding DataContext.DeleteOperatorCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=ItemsControl}}" CommandParameter="{Binding}">
                                <Grid  VerticalAlignment="Top" Height="27" Margin="0,-1,0,0">
                                    <Image Source="/VirtoCommerce.ManagementClient.Core;component/Themes/images/expr_close.png" Stretch="None" VerticalAlignment="Center" />
                                </Grid>
                            </Button>

                            <ItemsControl ItemsSource="{Binding HeaderElements}" ItemsPanel="{StaticResource LeftOrientedItemsPanelTemplate}" 
                                          ItemTemplate="{StaticResource HeaderElements_DataTemplate}" Margin="0" Padding="0" VerticalAlignment="Top"/>
                        </StackPanel>

                        <TextBlock HorizontalAlignment="Left" Margin="30,5,0,2" Text="{Binding ErrorMessage}" Style="{StaticResource Expression_ErrorTextBlock_Style}" 
								   Visibility="{Binding IsValid, Converter={StaticResource visibilityConverter}, ConverterParameter='False'}" />

                        <!--ItemsControl is an extremely special container as it's Datacontext is parent element-->
                        <ItemsControl ItemsSource="{Binding Children}" Margin="30,0,0,0" Padding="0" ItemTemplate="{DynamicResource ChildElements_DataTemplate}">
                            <ItemsControl.Resources>
                                <DataTemplate DataType="{x:Type core_controls:LabelElement}">
                                    <Grid  VerticalAlignment="Top" Height="27" Margin="0">
                                        <TextBlock Text="{Binding Label}" Foreground="#606060" FontSize="13" VerticalAlignment="Center" Margin="0,-2,0,0" Padding="0" />
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.Resources>
                        </ItemsControl>

                        <!--+ add something-->
                        <Button Margin="30,5,0,20" HorizontalAlignment="Left">
                            <TextBlock Text="{Binding NewChildLabel}" Style="{StaticResource Expression_AddingTextBlock_Style}" FontSize="13" />
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" PropertyName="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Mode=OneWay}"/>
                                    <ei:ChangePropertyAction TargetObject="{Binding ContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" PropertyName="IsOpen" Value="True"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>

                    </StackPanel>
                </DataTemplate>

                <DataTemplate DataType="{x:Type core_controls:CustomSelectorElement}">
                    <Grid  VerticalAlignment="Top" Height="27">
                        <TextBlock Text="{Binding InputDisplayName}" MouseLeftButtonDown="CustomSelectorElement_MouseLeftButtonDown" Margin="5,-2,5,0" ToolTip="{Binding InputDisplayName}" 
                               Style="{StaticResource Expression_SelectionTextBlock_Style}" FontSize="13" VerticalAlignment="Center"/>
                    </Grid>
                </DataTemplate>

            </ContentControl.Resources>
        </ContentControl>
    </Grid>
</UserControl>
