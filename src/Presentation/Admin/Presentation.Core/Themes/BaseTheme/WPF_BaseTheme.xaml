<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:core_controls="clr-namespace:VirtoCommerce.ManagementClient.Core.Controls"
    xmlns:core_Converters="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Converters"
    xmlns:inf_behavior="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Behaviors"
    xmlns:common="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Common"
  
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d">


	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/VirtoCommerce.ManagementClient.Core;component/Themes/BaseTheme/BaseThemeBrushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<core_Converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
	<core_Converters:StringToVisibilityConverter x:Key="StringToOppositeVisibilityConverter" OppositeStringValue="True" />

	<Style x:Key="Virto_InputControl_Style" TargetType="{x:Type Control}">
		<Setter Property="Background" Value="{DynamicResource Virto_TextBox_Background_Brush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_Border_Brush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBox_Foreground_Brush}"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FontFamily" Value="Resources/Fonts/#segoeui"/>
		<Setter Property="FontSize" Value="14" />
		<Setter Property="Height" Value="30"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
	</Style>


	<Style x:Key="Virto_Base_TextBlock_Style" TargetType="TextBlock">
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBlock_Foreground_Brush}"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FontFamily" Value="Resources/Fonts/#segoeui"/>
		<Setter Property="FontSize" Value="14" />
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="Padding" Value="0"/>
		<!--<Setter Property="TextOptions.TextRenderingMode" Value="Aliased"/>-->
	</Style>

	<Style x:Key="Virto_Base_TextBlock_Watermark_Style" TargetType="TextBlock" BasedOn="{StaticResource Virto_Base_TextBlock_Style}">
		<Setter Property="Margin" Value="2,7,0,0"/>
		<Setter Property="FontStyle" Value="Italic"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBox_Watermark_Foreground_Brush}"/>
	</Style>
	<!--Hyperlink-->
	<Style x:Key="Virto_Base_Hyperlink_Style" TargetType="{x:Type Hyperlink}">
		<Style.Resources>
			<Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
				<Setter Property="Margin" Value="0"/>
				<Setter Property="Cursor" Value="Hand"/>
			</Style>
		</Style.Resources>
		<Setter Property="Foreground" Value="{DynamicResource Virto_HyperLink_Foreground_Brush}"/>
		<Setter Property="TextDecorations" Value="Underline"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource Virto_HyperLink_MouseOver_Foreground_Brush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource Virto_HyperLink_Disable_Foreground_Brush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="Cursor" Value="Hand"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Buttons-->


	<!--button with green background and light foreground. E.g. "save"   "OK" -->
	<Style x:Key="Virto_Base_Button_Style" TargetType="{x:Type Button}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Height" Value="30"/>
		<Setter Property="Width" Value="90"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Opacity" Value="1"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="Resources/Fonts/#segoeui"/>
		<Setter Property="Background" Value="{DynamicResource Virto_Button_Background_Normal_Brush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_Button_BorderBrush_Normal_Brush}"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_Button_Foreground_Normal_Brush}"/>
		<Setter Property="BorderThickness" Value="0"></Setter>
		<Setter Property="Padding" Value="5,3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{TemplateBinding Background}" ClipToBounds="True">
						<Border x:Name="innerShadow" BorderThickness="0,0,0,0" Margin="-2">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" TextBlock.Foreground="{TemplateBinding Foreground}">
							</ContentPresenter>
							<Border.RenderTransform>
								<TranslateTransform x:Name="translateTransform"/>
							</Border.RenderTransform>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_Button_Background_MouseOver_Brush}"/>
							<Setter Property="Foreground" Value="{DynamicResource Virto_Button_Foreground_MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_Button_Background_Pressed_Brush}"/>
							<Setter Property="Foreground" Value="{DynamicResource Virto_Button_Foreground_Pressed_Brush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" TargetName="Bd" Value="0.3"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Transparent background Button-->
	<Style x:Key="Virto_Base_Button_Transparent_Style" TargetType="{x:Type Button}">
		<Setter Property="FontSize" Value="11"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="{TemplateBinding Padding}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource Virto_Button_Foreground_MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" TargetName="Bd" Value="0.3"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--SmallCloseButton-->
	<Style x:Key="Virto_Base_SmallCloseButton_Style" TargetType="{x:Type Button}">
		<Setter Property="Margin" Value="6,4,0,0"/>
		<Setter Property="HorizontalAlignment" Value="Right"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="rootBorder" Background="{TemplateBinding Background}" Margin="-2">
						<Border x:Name="innerBorder" Width="18" Height="18" VerticalAlignment="Center" Tag="0">
							<Path x:Name="cross" Width="18" Height="18" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Data="M 4,4 L14,14 M4,14 L14,4"/>
							<Border.RenderTransform>
								<TranslateTransform x:Name="translateTransform" Y="{Binding Path=Tag, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"/>
							</Border.RenderTransform>
						</Border>

					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
							<Setter Property="Tag" TargetName="innerBorder" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_SmallMinimizeButton_Style" TargetType="{x:Type Button}" BasedOn="{StaticResource Virto_Base_SmallCloseButton_Style}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="rootBorder" Background="{TemplateBinding Background}" Margin="-2">
						<Border x:Name="innerBorder" Width="18" Height="18" Tag="0">
							<Path x:Name="line" Width="18" Height="18" Stroke="White" StrokeThickness="2" Data="M 4,14 L14,14"/>
							<Border.RenderTransform>
								<TranslateTransform x:Name="translateTransform" Y="{Binding Path=Tag, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"/>
							</Border.RenderTransform>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
							<Setter Property="Tag" TargetName="innerBorder" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_SmallMaximizeButton_Style" TargetType="{x:Type Button}" BasedOn="{StaticResource Virto_Base_SmallCloseButton_Style}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="rootBorder" Background="{TemplateBinding Background}" Margin="-2">
						<Border x:Name="innerBorder" Width="18" Height="18" Tag="0">
							<Rectangle Width="Auto" Height="Auto" Stroke="White" StrokeThickness="2" Margin="3"/>
							<Border.RenderTransform>
								<TranslateTransform x:Name="translateTransform" Y="{Binding Path=Tag, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"/>
							</Border.RenderTransform>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
							<Setter Property="Tag" TargetName="innerBorder" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_SmallRestoreButton_Style" TargetType="{x:Type Button}" BasedOn="{StaticResource Virto_Base_SmallCloseButton_Style}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="rootBorder" Background="{TemplateBinding Background}" Margin="-2">
						<Border x:Name="innerBorder" Width="18" Height="18" Tag="0">
							<Grid >
								<Rectangle Width="Auto" Height="Auto" Stroke="White" StrokeThickness="2" Margin="3,6,6,3"/>
								<Path Stroke="White" StrokeThickness="2" Data="M 12,10 14,10 14,4 7,4 7,7 " />
							</Grid>
							<Border.RenderTransform>
								<TranslateTransform x:Name="translateTransform" Y="{Binding Path=Tag, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"/>
							</Border.RenderTransform>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource Virto_CloseButton_Background_Pressed-MouseOver_Brush}"/>
							<Setter Property="Tag" TargetName="innerBorder" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* Buttons-->



	<!--********* TextBoxs-->

	<ControlTemplate x:Key="Virto_TextBox_ErrorTemplate_ControlTemplate">
		<ControlTemplate.Resources>
			<core_Converters:BooleanOrMultivalueConverter x:Key="BooleanOrMultivalueConverter"/>
		</ControlTemplate.Resources>
		<StackPanel Orientation="Vertical">
			<Border BorderThickness="1.5" BorderBrush="{DynamicResource Virto_TextBox_ErrorTemplate_Border_BorderBrush}" CornerRadius="0"
                VerticalAlignment="Top" Margin="0,0,0,1">
				<Grid>
					<Polygon x:Name="toolTipCorner"
                         Grid.ZIndex="2"
                         Margin="-1"
                         Points="6,6 6,0 0,0" 
                         Fill="{DynamicResource Virto_TextBox_ErrorTemplate_Border_Background}" 
                         HorizontalAlignment="Right" 
                         VerticalAlignment="Top"
                         IsHitTestVisible="True"/>
					<Polyline Grid.ZIndex="3"
                          Points="7,7 0,0" Margin="-1" HorizontalAlignment="Right" 
                          StrokeThickness="1.5"
                          StrokeEndLineCap="Round"
                          StrokeStartLineCap="Round"
                          Stroke="White"
                          VerticalAlignment="Top"
                          IsHitTestVisible="True"/>
					<AdornedElementPlaceholder x:Name="adorner"/>
				</Grid>
			</Border>
			<Border x:Name="errorBorder" Background="{DynamicResource Virto_TextBox_ErrorTemplate_Border_Background}"
                Opacity="0" CornerRadius="0"
                IsHitTestVisible="False" MaxWidth="{Binding ElementName=adorner, Path=ActualWidth}"
                MinHeight="30">
				<TextBlock Text="{Binding ElementName=adorner,
                                      Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       Foreground="White" Margin="8,3,8,3" TextWrapping="WrapWithOverflow" FontSize="14"/>
			</Border>
		</StackPanel>
		<ControlTemplate.Triggers>
			<DataTrigger Value="True">
				<DataTrigger.Binding>
					<MultiBinding Converter="{StaticResource BooleanOrMultivalueConverter}">
						<Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
						<Binding ElementName="toolTipCorner" Path="IsMouseOver"/>
					</MultiBinding>
				</DataTrigger.Binding>
				<DataTrigger.EnterActions>
					<BeginStoryboard x:Name="fadeInStoryboard">
						<Storyboard>
							<DoubleAnimation Duration="00:00:00.15"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="1"/>
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.EnterActions>
				<DataTrigger.ExitActions>
					<StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
					<BeginStoryboard x:Name="fadeOutStoryBoard">
						<Storyboard>
							<DoubleAnimation Duration="00:00:00"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="0"/>
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.ExitActions>
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Virto_Base_TextBox_Style" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Virto_InputControl_Style}">
		<Setter Property="Padding" Value="1"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
		<Setter Property="common:RequiredFieldHelper.IsRequired" Value="False"/>
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource Virto_TextBox_ErrorTemplate_ControlTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border x:Name="Bd" TextBlock.FontSize="{TemplateBinding FontSize}"  Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
						<Grid>
							<ScrollViewer x:Name="PART_ContentHost"/>
							<TextBlock Margin="2" Text="{TemplateBinding Text}" x:Name="TrimmedText" TextTrimming="CharacterEllipsis" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Style="{StaticResource Virto_Base_TextBlock_Style}" Visibility="Hidden" ToolTip="{TemplateBinding Text}"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource Virto_TextBox_Background_MouseOver_Brush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="Opacity" Value="0.3" />
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderDisable_Brush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Visibility" TargetName="TrimmedText" Value="Hidden" />
							<Setter Property="Visibility" TargetName="PART_ContentHost" Value="Visible" />
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
							<Setter Property="Foreground" Value="{DynamicResource Virto_TextBox_Foreground_Selected_Brush}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" TargetName="TrimmedText" Value="Hidden" />
							<Setter Property="Visibility" TargetName="PART_ContentHost" Value="Visible" />
						</Trigger>
						<Trigger Property="IsFocused" Value="False">
							<Setter Property="Visibility" TargetName="TrimmedText" Value="Visible" />
							<Setter Property="Visibility" TargetName="PART_ContentHost" Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Validation.HasError" Value="true">
				<Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--PasswordBox-->
	<Style x:Key="Virto_Base_PasswordBox_Style" TargetType="PasswordBox" BasedOn="{StaticResource Virto_InputControl_Style}" >
		<Setter Property="Padding" Value="1"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="common:PasswordboxWatermarkTextHelper.IsMonitoring" Value="True"/>
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource Virto_TextBox_ErrorTemplate_ControlTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="PasswordBox">
					<Border x:Name="rootBorder" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<Grid>
							<ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="3" />
							<TextBlock Margin="2" Text="Password" x:Name="WatermarkText" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Style="{StaticResource Virto_Base_TextBlock_Watermark_Style}" Visibility="Hidden"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" />
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderDisable_Brush}" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
						</Trigger>
						<Trigger Property="common:PasswordboxWatermarkTextHelper.HasText" Value="False">
							<Setter TargetName="WatermarkText" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="common:PasswordboxWatermarkTextHelper.HasText" Value="True">
							<Setter Property="Background" TargetName="rootBorder" Value="{DynamicResource Virto_TextBox_Watermark_Background_Brush}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" TargetName="WatermarkText" Value="Hidden" />
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
							<Setter Property="Background" TargetName="rootBorder" Value="{DynamicResource Virto_TextBox_Watermark_Background_Brush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Validation.HasError" Value="true">
				<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Windows 8 password box -->
	<Style x:Key="RevealButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="PasswordRevealGlyphBorder" Background="Transparent" Margin="1,1,3,1"
                                BorderThickness="{TemplateBinding BorderThickness}">
							<TextBlock x:Name="GlyphElement" Foreground="Black" VerticalAlignment="Center" HorizontalAlignment="Center"
                                        Text="&#xE052;" FontFamily="Segoe UI Symbol" Margin="3,0"
                                        FontSize="{TemplateBinding FontSize}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding ElementName=GlyphElement, Path=IsMouseOver}" Value="True">
							<Setter TargetName="PasswordRevealGlyphBorder" Property="Background" Value="Gainsboro" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True">
							<Setter TargetName="PasswordRevealGlyphBorder" Property="Background" Value="Black" />
							<Setter TargetName="GlyphElement" Property="Foreground" Value="White" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Win8PasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource Virto_InputControl_Style}">
		<Setter Property="Padding" Value="1"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="common:PasswordboxWatermarkTextHelper.IsMonitoring" Value="True"/>
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource Virto_TextBox_ErrorTemplate_ControlTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Border x:Name="OuterBorder"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="true">
						<Grid VerticalAlignment="Center">
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<TextBox x:Name="RevealedPassword"
                                    Text="{TemplateBinding common:PasswordHelper.Password}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    VerticalContentAlignment="Center"
                                    Padding="{TemplateBinding Padding}"
                                    Margin="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    Visibility="Hidden" BorderThickness="0" IsReadOnly="True" FontFamily="Segoe UI" />
							<TextBlock x:Name="TextBoxHint"
                                      Text="Password"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Visibility="{Binding ElementName=RevealedPassword, Path=Text, Converter={StaticResource StringToOppositeVisibilityConverter}}" 
									  Style="{StaticResource Virto_Base_TextBlock_Watermark_Style}"/>
							<Button x:Name="RevealButton"
                                  Grid.Column="1" SnapsToDevicePixels="True"
                                  Style="{StaticResource RevealButtonStyle}"
                              Visibility="{Binding ElementName=RevealedPassword, Path=Text, Converter={StaticResource StringToVisibilityConverter}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" />
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderDisable_Brush}" />
							<Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter Property="Opacity" TargetName="RevealButton" Value="0.5" />
							<Setter Property="Text" TargetName="TextBoxHint" Value="{}{disabled} "/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
						</Trigger>
						<Trigger Property="common:PasswordboxWatermarkTextHelper.HasText" Value="False">
							<Setter TargetName="TextBoxHint" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="common:PasswordboxWatermarkTextHelper.HasText" Value="True">
							<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Virto_TextBox_Watermark_Background_Brush}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" TargetName="TextBoxHint" Value="Hidden" />
							<Setter Property="BorderBrush" Value="{DynamicResource Virto_TextBox_BorderMouseOver_Brush}" />
							<Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource Virto_TextBox_Watermark_Background_Brush}" />
						</Trigger>
						<DataTrigger Binding="{Binding ElementName=RevealButton, Path=IsPressed}" Value="True">
							<Setter TargetName="RevealedPassword" Property="Visibility" Value="Visible" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--ReadOnly, text copying enabled TextBox-->
	<Style x:Key="Virto_TextBox_ReadOnly_Style" TargetType="{x:Type TextBox}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="IsReadOnly" Value="True" />
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBlock_Foreground_Brush}"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu>
					<MenuItem Header="Copy" Command="ApplicationCommands.Copy" FontWeight="DemiBold" />
				</ContextMenu>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* ProgressBar-->

	<Style TargetType="{x:Type ProgressBar}" >
		<Setter Property="Background" Value="{DynamicResource Virto_ProgressBar_Background_Brush}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_ProgressBar_Foreground_Brush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="TemplateRoot">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Determinate"/>
								<VisualState x:Name="Indeterminate">
									<Storyboard RepeatBehavior="Forever">
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
											<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
											<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
											<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
											<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
											<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
										</PointAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
						<Rectangle x:Name="PART_Track"/>
						<Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
							<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
							<Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
								<Rectangle.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Rectangle.RenderTransform>
							</Rectangle>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="true">
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Height" Value="5"/>
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Width" Value="5"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--********* ProgressBar-->


	<!--*********  Comboboxes-->

	<ControlTemplate x:Key="Virto_ComboBox_ErrorTemplate_ControlTemplate">
		<ControlTemplate.Resources>
			<core_Converters:BooleanOrMultivalueConverter x:Key="BooleanOrMultivalueConverter"/>
		</ControlTemplate.Resources>
		<StackPanel Orientation="Vertical">
			<Border BorderThickness="1.5" BorderBrush="{DynamicResource Virto_TextBox_ErrorTemplate_Border_BorderBrush}" CornerRadius="0"
                VerticalAlignment="Top" Margin="0,0,0,1">
				<Grid>
					<AdornedElementPlaceholder x:Name="adorner"/>
				</Grid>
			</Border>
			<Border x:Name="errorBorder" Background="{DynamicResource Virto_TextBox_ErrorTemplate_Border_Background}"
                Opacity="0" CornerRadius="0"
                IsHitTestVisible="False" MaxWidth="{Binding ElementName=adorner, Path=ActualWidth}"
                MinHeight="30">
				<TextBlock Text="{Binding ElementName=adorner,
                                      Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       Foreground="White" Margin="8,3,8,3" TextWrapping="WrapWithOverflow" FontSize="14"/>
			</Border>
		</StackPanel>
		<ControlTemplate.Triggers>
			<DataTrigger Value="True">
				<DataTrigger.Binding>
					<MultiBinding Converter="{StaticResource BooleanOrMultivalueConverter}">
						<Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
						<!--<Binding ElementName="toolTipCorner" Path="IsMouseOver"/>-->
						<Binding ElementName="adorner" Path="AdornedElement.IsMouseOver" />
					</MultiBinding>
				</DataTrigger.Binding>
				<DataTrigger.EnterActions>
					<BeginStoryboard x:Name="fadeInStoryboard">
						<Storyboard>
							<DoubleAnimation Duration="00:00:00.15"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="1"/>
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.EnterActions>
				<DataTrigger.ExitActions>
					<StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
					<BeginStoryboard x:Name="fadeOutStoryBoard">
						<Storyboard>
							<DoubleAnimation Duration="00:00:00"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="0"/>
						</Storyboard>
					</BeginStoryboard>
				</DataTrigger.ExitActions>
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Geometry x:Key="Virto_Base_DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

	<Style x:Key="Virto_Base_ComboBoxTransparentButton_Style" TargetType="{x:Type ToggleButton}">
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Height" Value="Auto"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{x:Static Microsoft_Windows_Themes:ClassicBorderDecorator.ClassicBorderBrush}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<DockPanel Background="{TemplateBinding Background}" LastChildFill="false" SnapsToDevicePixels="true">
						<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" DockPanel.Dock="Right"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Tag="0">
							<Path Margin="0" x:Name="arrow" Data="{DynamicResource Virto_Base_DownArrowGeometry}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center">
								<Path.RenderTransform>
									<RotateTransform x:Name="rotateTransform" Angle="{Binding Path=Tag, FallbackValue=0,TargetNullValue=0, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Border}}"/>
								</Path.RenderTransform>
							</Path>
						</Border>
					</DockPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="arrow" Property="Margin" Value="8,5,0,0"/>
							<Setter TargetName="Border" Property="Tag" Value="180"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="Virto_Base_ComboBoxButton_Style" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Virto_Base_ComboBoxTransparentButton_Style}">
		<Setter Property="Template">
			<Setter.Value>

				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<DockPanel Background="{TemplateBinding Background}" LastChildFill="false" SnapsToDevicePixels="true">
						<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="Transparent" DockPanel.Dock="Right" Width="30" Tag="0">
							<Path x:Name="arrow" Data="{StaticResource Virto_Base_DownArrowGeometry}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center">
								<Path.RenderTransform>
									<RotateTransform x:Name="rotateTransform" Angle="{Binding Path=Tag,FallbackValue=0,TargetNullValue=0, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"/>
								</Path.RenderTransform>
							</Path>
						</Border>
					</DockPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="arrow" Property="Margin" Value="14,5,0,0"/>
							<Setter TargetName="Border" Property="Tag" Value="180"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ComboBoxItem_Style" TargetType="{x:Type ComboBoxItem}">
		<Style.Resources>
			<Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
				<Setter Property="Margin" Value="4,2,2,2"/>
			</Style>
		</Style.Resources>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBlock_Foreground_Brush}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="FontFamily" Value="Fonts/#segoeui"/>
		<Setter Property="FontSize" Value="14" />
		<Setter Property="Padding" Value="6,0,0,0"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Height" Value="27"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="{DynamicResource Virto_ComboboxItem_Content_MouseOver_Foreground}"></Setter>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource Virto_ComboboxItem_MouseOver_Background}"></Setter>
						</Trigger>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource Virto_ComboboxItem_MouseOver_Background}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ComboBox_FocusVisual_Style">
		<Setter Property="FrameworkElement.Margin" Value="2,2,16,2" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="{TemplateBinding Margin}" SnapsToDevicePixels="true" Stroke="{DynamicResource Virto_MouseOver-Focused_BorderBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ComboBoxEditableTextBox_Style" TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TextBlock_Foreground_Brush}"/>
		<Setter Property="FontFamily" Value="Fonts/#segoeui"/>
		<Setter Property="FontSize" Value="14" />
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="Virto_Base_ComboBoxEditable_Template" TargetType="{x:Type ComboBox}">
		<Border x:Name="mainBorder" Height="{TemplateBinding Height}" VerticalAlignment="Center" Padding="0" Margin="0" Width="{TemplateBinding Width}"
                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" 
                            Background="{TemplateBinding Background}">
			<Grid VerticalAlignment="Center" Height="Auto" Margin="0">
				<!--main visible content - single item and popup list -->
				<Border x:Name="Border" Margin="-1,25,0,0" VerticalAlignment="Center" Height="Auto" >
					<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Relative" OpacityMask="{x:Null}" VerticalAlignment="Center">
						<Border Padding="1,1,1,0" x:Name="DropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Border}" Background="{TemplateBinding Background}">
							<ScrollViewer x:Name="DropDownScrollViewer" Margin="-1,0,-1,0">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
										<Rectangle x:Name="OpaqueRect" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Grid>
							</ScrollViewer>
						</Border>
					</Popup>
				</Border>
				<DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="0">
					<FrameworkElement DockPanel.Dock="Right" Margin="0" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" VerticalAlignment="Center"/>
					<Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}" Background="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Center" >
						<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" 
                                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                      HorizontalAlignment="Stretch" Margin="0,0,1,0"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter.Resources>
								<Style TargetType="{x:Type TextBlock}">
									<Setter Property="HorizontalAlignment" Value="Stretch"/>
									<Setter Property="VerticalAlignment" Value="Center"/>
									<Setter Property="Margin" Value="4,0"/>
									<Setter Property="Padding" Value="0"/>
									<Setter Property="FontSize" Value="14" />
								</Style>
							</ContentPresenter.Resources>
						</ContentPresenter>
					</Border>
				</DockPanel>
				<ToggleButton ClickMode="Press" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                              Style="{StaticResource Virto_Base_ComboBoxButton_Style}" Width="Auto" Foreground="{TemplateBinding Foreground}"/>
				<DockPanel Margin="2">
					<FrameworkElement DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
					<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" 
                             Style="{DynamicResource Virto_Base_ComboBoxEditableTextBox_Style}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</DockPanel>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource Virto_ComboBox_MouseOver-Focused_BorderBrush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="White"/>
				<Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsDropDownOpen" Value="true">
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="MinHeight" TargetName="DropDownBorder" Value="95"/>
			</Trigger>
			<Trigger Property="IsGrouping" Value="true">
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</Trigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Virto_Base_ComboBox_Style" TargetType="{x:Type ComboBox}">
		<!--<Setter Property="inf_behavior:WatermarkComboBoxBehavior.EnableWatermark" Value="True"/>-->
		<Setter Property="inf_behavior:WatermarkComboBoxBehavior.Label" Value="Select a value"/>
		<Setter Property="inf_behavior:WatermarkComboBoxBehavior.LabelStyle" Value="{StaticResource Virto_Base_TextBlock_Watermark_Style}"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource Virto_Base_ComboBox_FocusVisual_Style}"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource Virto_Base_ComboBoxItem_Style}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_ComboBox_Unfocused_BorderBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Height" Value="30"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Background" Value="{DynamicResource Virto_ComboBox_Normal_Background}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="common:RequiredFieldHelper.IsRequired" Value="False"/>
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource Virto_ComboBox_ErrorTemplate_ControlTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<ControlTemplate.Resources>
                        <DataTemplate DataType="{x:Type sys:String}" >
                            <ContentPresenter ContentTemplate="{DynamicResource Virto_SearchConstant_ComboBox_DataTemplate}" />
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type common:Single_String}" >
                            <ContentPresenter Content="{Binding Value}" ContentTemplate="{DynamicResource Virto_SearchSpecial_ComboBox_DataTemplate}" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
					
					<Border x:Name="mainBorder" Height="{TemplateBinding Height}" VerticalAlignment="Center" Padding="0" Margin="0" Width="{TemplateBinding Width}"
						BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="{TemplateBinding Background}"
                        common:RequiredFieldHelper.IsRequired="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(common:RequiredFieldHelper.IsRequired)}">
						<Grid VerticalAlignment="Center" Height="Auto" Margin="0">
							<!--main visible content - single item and popup list -->
							<Border x:Name="Border" Margin="-1,25,0,0" VerticalAlignment="Center" Height="Auto" >
								<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Relative" OpacityMask="{x:Null}" VerticalAlignment="Center">
									<Border Padding="1,1,1,0" x:Name="DropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Border}" Background="{TemplateBinding Background}">
										<ScrollViewer x:Name="DropDownScrollViewer" Margin="-1,0,-1,0">
											<Grid RenderOptions.ClearTypeHint="Enabled">
												<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
													<Rectangle x:Name="OpaqueRect" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
												</Canvas>
												<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
											</Grid>
										</ScrollViewer>
									</Border>
								</Popup>
							</Border>
							<DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="0">
								<FrameworkElement DockPanel.Dock="Right" Margin="0" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" VerticalAlignment="Center"/>
								<Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}" Background="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Center" >
									<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" 
                                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                      HorizontalAlignment="Stretch" Margin="0,0,1,0"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
										<ContentPresenter.Resources>
											<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
												<Setter Property="HorizontalAlignment" Value="Stretch"/>
												<Setter Property="VerticalAlignment" Value="Center"/>
												<Setter Property="Margin" Value="4,0"/>
												<Setter Property="Padding" Value="0"/>
											</Style>
										</ContentPresenter.Resources>
									</ContentPresenter>
								</Border>
							</DockPanel>
							<ToggleButton ClickMode="Press" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Virto_Base_ComboBoxButton_Style}" Width="Auto" Foreground="{TemplateBinding Foreground}"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource Virto_ComboBox_MouseOver-Focused_BorderBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							<Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="White"/>
						</Trigger>
						<Trigger Property="IsDropDownOpen" Value="true">
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
							<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
							<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=(common:RequiredFieldHelper.IsRequired)}" Value="True"/>
								<Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=SelectedItem}" Value="{x:Null}"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource Virto_Control_IsRequiredField_Brush}"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="Template" Value="{DynamicResource Virto_Base_ComboBoxEditable_Template}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<DataTemplate x:Key="Virto_Search_ComboBox_DataTemplate">
		<TextBlock x:Name="textBlock" Text="{Binding Converter={x:Static LocalizingConverter.Current}}" />
		<DataTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding SelectedIndex, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" Value="0" />
					<Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" Value="False" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="textBlock" Property="FontStyle" Value="Italic" />
			</MultiDataTrigger>
		</DataTemplate.Triggers>
	</DataTemplate>

	<!--non-localizable data-->
	<DataTemplate x:Key="Virto_SearchData_ComboBox_DataTemplate">
		<TextBlock Text="{Binding }" Margin="4,0" />
	</DataTemplate>

	<!--localizable texts-->
	<DataTemplate x:Key="Virto_SearchConstant_ComboBox_DataTemplate">
		<TextBlock Text="{Binding Converter={x:Static LocalizingConverter.Current}}" Margin="4,0" />
	</DataTemplate>

	<!-- special localizable texts (e.g. 'Select', 'All items')-->
	<DataTemplate x:Key="Virto_SearchSpecial_ComboBox_DataTemplate">
		<TextBlock Text="{Binding Converter={x:Static LocalizingConverter.Current}}" FontStyle="Italic" Margin="4,0"/>
	</DataTemplate>
	<!--*********  Comboboxes-->

	<!--********* CheckBoxes-->
	<Style x:Key="Virto_Base_CheckBox_Style" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Virto_InputControl_Style}">
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_CheckBox_Border_Brush}"/>
		<Setter Property="Background" Value="{DynamicResource Virto_CheckBox_Background_Brush}"/>
		<Setter Property="Width" Value="auto"/>
		<Setter Property="Height" Value="auto"/>
		<Setter Property="FontSize" Value="15"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<BulletDecorator Background="Transparent" x:Name="bulletDecorator" HorizontalAlignment="Center" Margin="0,0,-6,0">
						<BulletDecorator.Bullet>
							<Border x:Name="Border" Width="16" Height="16" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
								<Grid>
									<Path Visibility="Collapsed" Width="12" Height="12" x:Name="CheckMark" SnapsToDevicePixels="true" 
                                          Stroke="{DynamicResource Virto_CheckBox_Content_Default_Foreground_Brush}" StrokeThickness="2" Data="M0.5,7.5 L5,11 M4.1,10.5 L11,1"/>
									<Path Visibility="Collapsed" Width="12" Height="12" x:Name="InderminateMark" SnapsToDevicePixels="True" 
                                          VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{DynamicResource Virto_CheckBox_Foreground_Brush}" 
                                          Stroke="{DynamicResource Virto_CheckBox_Foreground_Brush}" StrokeThickness="1">
										<Path.Data>
											<RectangleGeometry Rect="2,2 8,8"/>
										</Path.Data>
									</Path>
								</Grid>
							</Border>
						</BulletDecorator.Bullet>
						<BulletDecorator.Child>
							<ContentPresenter x:Name="contentPresenter" TextBlock.Foreground="{TemplateBinding Foreground}" Margin="3,0,0,0" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</BulletDecorator.Child>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="Check">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames  Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(Path.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Indeterminate">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="InderminateMark" Storyboard.TargetProperty="(Path.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource Virto_CheckBox_Content_MouseOver_Foreground_Brush}"/>
							<!--<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Virto_CheckBox_BorderBrush_MouseOver_Brush}"/>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource Virto_CheckBox_Background_MouseOver_Brush}"/>
							<Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource Virto_CheckBox_Content_MouseOver_Foreground_Brush}"/>
							<Setter TargetName="InderminateMark" Property="Stroke" Value="{DynamicResource Virto_CheckBox_Content_MouseOver_Foreground_Brush}"/>-->
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* Checkboxes-->



	<!--********* RadioButtons-->
	<Style x:Key="Virto_Base_RadioButton_Style" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource Virto_InputControl_Style}">
		<Setter Property="Margin" Value="0,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Height" Value="auto"/>
		<Setter Property="Width" Value="auto"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_RadioButton_Content_Default_Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="16" Height="16" >
								<Ellipse x:Name="Border" Fill="{StaticResource Virto_RadioButton_Border_Fill_Brush}" StrokeThickness="1"
										Stroke="{DynamicResource Virto_RadioButton_Ellipse_Checked_Stroke}" />
								<Ellipse x:Name="CheckMark" Visibility="Collapsed" Margin="4" Fill="{DynamicResource Virto_RadioButton_Content_Default_Foreground}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter x:Name="contentPresenter" Margin="3,0,0,0" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" 
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="{DynamicResource Virto_RadioButton_Content_MouseOver_Foreground}"/>
							<Setter TargetName="Border" Property="Stroke" Value="{DynamicResource Virto_RadioButton_Ellipse_MouseOver_Stroke}"></Setter>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="HasContent" Value="True">
							<Setter Property="FocusVisualStyle">
								<Setter.Value>
									<Style>
										<Setter Property="Control.Template">
											<Setter.Value>
												<ControlTemplate>
													<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                                               StrokeThickness="1" StrokeDashArray="1 2"/>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* RadioButtons-->



	<!--********* DatePickers-->
	<Style x:Key="Virto_Base_DatePicker_Style"  TargetType="{x:Type DatePicker}" BasedOn="{StaticResource Virto_InputControl_Style}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource Virto_Base_ComboBox_FocusVisual_Style}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="Width" Value="Auto" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_DatePicker_Border_Default_Brush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Height" Value="30"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}" >
					<Border BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
						<Grid Name="PART_Root" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Button Foreground="{TemplateBinding TextElement.Foreground}" Name="PART_Button" Width="24" Margin="3,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Focusable="False" Grid.Column="1" Cursor="Hand">
								<Button.Template>
									<ControlTemplate TargetType="Button">
										<StackPanel>
											<Path Data="M48.569,46.010001L56.333317,46.010001 56.333317,52.009501 48.569,52.009501z M33.634998,46.010001L45.902,46.010001 45.902,52.009501 33.634998,52.009501z M19.771,46.010001L30.969,46.010001 30.969,52.009501 19.771,52.009501z M7.3336616,46.010001L17.104,46.010001 17.104,52.009501 7.3336616,52.009501z M48.569,33.565999L56.333317,33.565999 56.333317,43.343001 48.569,43.343001z M33.634998,33.565999L45.902,33.565999 45.902,43.343001 33.634998,43.343001z M7.3336616,33.565999L17.104,33.565999 17.104,43.343001 7.3336616,43.343001z M48.569,24.3429L56.333317,24.3429 56.333317,30.898999 48.569,30.898999z M33.634998,24.3429L45.902,24.3429 45.902,30.898999 33.634998,30.898999z M19.771,24.3429L30.969,24.3429 30.969,30.898999 19.771,30.898999z M7.3336616,24.3429L17.104,24.3429 17.104,30.898999 7.3336616,30.898999z M4.6669998,21.676L4.6669998,54.676002 59,54.676002 59,21.676z M0,8.2830003L12.437,8.2830003 12.437,12.797082C12.437,16.108637 15.1272,18.801001 18.4345,18.801001 21.7444,18.801001 24.436998,16.108637 24.436998,12.797082L24.436998,8.2830003 41.233997,8.2830003 41.233997,12.797082C41.233997,16.108637 43.926712,18.801001 47.236748,18.801001 50.545586,18.801001 53.237,16.108637 53.237,12.797082L53.237,8.2830003 64.333,8.2830003 64.333,58.783 0,58.783z M47.237251,0C48.71328,0,49.903999,1.1923261,49.903999,2.6639395L49.903999,12.797221C49.903999,14.275254 48.71328,15.467999 47.237251,15.467999 45.764023,15.467999 44.568001,14.275254 44.568001,12.797221L44.568001,2.6639395C44.568001,1.1923261,45.764023,0,47.237251,0z M18.43495,0C19.909369,0,21.104,1.1923261,21.104,2.6639395L21.104,12.797221C21.104,14.275254 19.909369,15.467999 18.43495,15.467999 16.965633,15.467999 15.771,14.275254 15.771,12.797221L15.771,2.6639395C15.771,1.1923261,16.965633,0,18.43495,0z" Stretch="Uniform" Fill="#FF000000" Width="23" Height="23" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5"/>
										</StackPanel>
									</ControlTemplate>
								</Button.Template>
							</Button>
							<DatePickerTextBox Foreground="{TemplateBinding TextElement.Foreground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Name="PART_TextBox" Grid.Column="0" Grid.Row="0" xml:space="preserve"/>
                            <Grid Name="PART_DisabledVisual" Opacity="0" IsHitTestVisible="False" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle RadiusX="1" RadiusY="1" Fill="{DynamicResource Virto_DatePicker_DisabledVisual_Brush}" Grid.Column="0" Grid.Row="0" />
                                <Rectangle RadiusX="1" RadiusY="1" Fill="{DynamicResource Virto_DatePicker_DisabledVisual_Brush}" Width="19" Height="18" Margin="3,0,3,0" Grid.Column="1" Grid.Row="0" />
                                <Popup Placement="Bottom" StaysOpen="False" AllowsTransparency="True" Name="PART_Popup" />
                            </Grid>
                        </Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="SelectedDate" Value="{x:Null}">
							<Setter Property="FontStyle"  Value="Italic" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* DatePickers-->


	<!--********* TabControl-->

	<Style x:Key="Virto_Base_TabItem_Style" TargetType="{x:Type TabItem}">
		<Setter Property="Padding" Value="4,6,20,1"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Opacity" Value="0.7"/>
		<Setter Property="Cursor" Value="Arrow"/>
		<Setter Property="TextElement.FontSize" Value="17"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid Margin="0,0,0,9">
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="auto"/>
						</Grid.RowDefinitions>

						<ContentPresenter ContentSource="Header" Opacity="{TemplateBinding Opacity}" Cursor="{TemplateBinding Cursor}" 
                                      TextElement.FontSize="{TemplateBinding TextElement.FontSize}" x:Name="content"
                                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                      Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
						<Rectangle x:Name="rectSelected" Fill="{StaticResource Virto_HighLightText_Foreground_Brush}" Grid.Row="1" Height="2" Visibility="Hidden" Margin="4,0,20,0"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Opacity" TargetName="content" Value="1"/>
							<Setter TargetName="rectSelected" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Opacity" TargetName="content" Value="1"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid Margin="0,-2,0,0">
						<ContentPresenter Content="{TemplateBinding Content}" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_TabItem_Bound_Style" TargetType="{x:Type TabItem}" BasedOn="{StaticResource Virto_Base_TabItem_Style}">
        <Setter Property="Header" Value="{LocBinding CategoryBinding={Binding Category}, StringFormat=Caption}" />
		<Setter Property="Content" Value="{Binding ViewModel}" />
	</Style>

	<Style x:Key="Virto_Base_TabControlHorizontal_Style" TargetType="{x:Type TabControl}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_TabControl_BorderBrush_Default_Brush}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TabControl_Foreground_Default_Brush}"/>
		<Setter Property="FontSize" Value="16"/>
		<Setter Property="FontStretch" Value="Normal"/>
		<Setter Property="FontStyle" Value="Normal"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
		<Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
		<Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
		<Setter Property="ClipToBounds" Value="True"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource Virto_Base_TabItem_Style}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                            ClipToBounds="{TemplateBinding ClipToBounds}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" 
                            KeyboardNavigation.DirectionalNavigation="Local" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontWeight="{TemplateBinding FontWeight}" 
                            TextElement.FontStyle="{TemplateBinding FontStyle}" TextElement.FontStretch="{TemplateBinding FontStretch}" TextElement.FontSize="{TemplateBinding FontSize}" 
                            TextElement.FontFamily="{TemplateBinding FontFamily}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}" TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition x:Name="FirstColumnDefinition" Width="*"/>
								<ColumnDefinition x:Name="SecondColumnDefinition" Width="0"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition x:Name="FirstRowDefinition" Height="Auto"/>
								<RowDefinition x:Name="SecondRowDefinition" Height="*"/>
							</Grid.RowDefinitions>
							<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
							<Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0" 
                                    KeyboardNavigation.DirectionalNavigation="Contained" 
                                    KeyboardNavigation.TabIndex="2" 
                                    KeyboardNavigation.TabNavigation="Local" >
								<ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" 
                                                  Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" 
                                                  ContentSource="SelectedContent"/>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="Height" TargetName="FirstRowDefinition" Value="*"/>
							<Setter Property="Height" TargetName="SecondRowDefinition" Value="Auto"/>

							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>

						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="Width" TargetName="FirstColumnDefinition" Value="Auto"/>
							<Setter Property="Width" TargetName="SecondColumnDefinition" Value="*"/>
							<Setter Property="Height" TargetName="FirstRowDefinition" Value="*"/>
							<Setter Property="Height" TargetName="SecondRowDefinition" Value="0"/>

							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>

							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>

						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="Width" TargetName="FirstColumnDefinition" Value="*"/>
							<Setter Property="Width" TargetName="SecondColumnDefinition" Value="Auto"/>
							<Setter Property="Height" TargetName="FirstRowDefinition" Value="*"/>
							<Setter Property="Height" TargetName="SecondRowDefinition" Value="0"/>

							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>

							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding FontSize, ConverterParameter=18, Mode=OneWay, RelativeSource={RelativeSource Self}}">
				<Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
			</DataTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="BorderBrush" Value="{DynamicResource Virto_TabControl_BorderBrush_Disabled_Brush}"/>
				<Setter Property="Foreground" Value="{DynamicResource Virto_TabControl_Foreground_Disabled_Brush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="Virto_Base_ExpanderTabItem_Style" TargetType="{x:Type TabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border Name="Bd" BorderBrush="{x:Null}" Background="{x:Null}" Padding="5" >
							<ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header"/>
							<i:Interaction.Triggers>
								<i:EventTrigger EventName="MouseLeftButtonDown">
									<i:InvokeCommandAction Command="{Binding HeaderClickCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type core_controls:ExpandedTabControl}}}" 
                                                           CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabItem}}}"/>
								</i:EventTrigger>
							</i:Interaction.Triggers>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource Virto_ExpanderTabControl_Background_Brush}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource Virto_ExpanderTabControl_Background_Brush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ExpanderTabControl_Style" TargetType="TabControl">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="TabStripPlacement" Value="Right"/>
		<Setter Property="ItemContainerStyle" Value="{StaticResource Virto_Base_ExpanderTabItem_Style}"/>
		<Setter Property="Background" Value="{DynamicResource Virto_ExpanderTabControl_Background_Brush}"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Border Grid.Column="0" BorderThickness="0" Background="{TemplateBinding Background}" Margin="0" Padding="0" 
                                Visibility="{Binding Path=IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type core_controls:ExpandedTabControl}}, Converter={x:Static core_Converters:ToVisibilityConverter.Current}}">
							<ContentPresenter ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
						</Border>
						<TabPanel Grid.Column="1" Panel.ZIndex="1" IsItemsHost="True" Background="Transparent" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--********* TabControl-->


	<!--********* ScrollBar-->

	<Style x:Key="Virto_Base_ScrollBarLineButton_Style" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Background" Value="{DynamicResource Virto_Scroll_RepeatButton_Backround_Brush}"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_Scroll_RepeatButton_Foreground_Brush}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
						<Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
							<Path Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
							<Path x:Name="hoverPath" Opacity="0" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
								<Path.RenderTransform>
									<TransformGroup>
										<ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Path.RenderTransform>
							</Path>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" TargetName="hoverPath" Value="1"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true"/>
						<Trigger Property="IsEnabled" Value="false"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_VerticalScrollBar_PageButton_Style" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle x:Name="PageButtonBackground" Fill="Transparent"/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="PageButtonBackground" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_HorizontalScrollBar_Thumb_Style"  TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid x:Name="ThumbVisual" Grid.RowSpan="2">
						<Rectangle x:Name="Background" StrokeThickness="1"  Fill="{DynamicResource Virto_Scroll_Thumb_Backround_Brush}"  Stroke="{x:Null}"/>
						<Rectangle x:Name="BackgroundMouseOver" StrokeThickness="1" Stroke="{x:Null}" Opacity="0" Fill="White"/>
						<Rectangle x:Name="BackgroundPressed" StrokeThickness="1" Stroke="{x:Null}" Opacity="0"/>
						<Rectangle x:Name="Highlight" Stroke="Transparent" StrokeThickness="1" Margin="1" Opacity="0.6" IsHitTestVisible="false" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.2" TargetName="BackgroundMouseOver"/>
						</Trigger>
						<Trigger Property="IsDragging" Value="True">
							<Setter Property="Opacity" Value="0.2" TargetName="BackgroundPressed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_VerticalScrollBar_Thumb_Style"  TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid x:Name="ThumbVisual" >
						<Rectangle x:Name="Background" StrokeThickness="0" Stroke="{x:Null}" Fill="{DynamicResource Virto_Scroll_Thumb_Backround_Brush}" />
						<Rectangle x:Name="BackgroundMouseOver" StrokeThickness="1" Stroke="{x:Null}" Fill="White" Opacity="0"/>
						<Rectangle x:Name="BackgroundPressed"  StrokeThickness="1" Stroke="{x:Null}" Fill="White" Opacity="0"/>
						<Rectangle x:Name="Height" Height="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" Value="0.2" TargetName="BackgroundMouseOver"/>
						</Trigger>
						<Trigger Property="IsDragging" Value="True">
							<Setter Property="Opacity" Value="0.2" TargetName="BackgroundPressed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_HorizontalScrollBar_PageButton_Style" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle x:Name="PageButtonBackground" Fill="Transparent"/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="PageButtonBackground" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ScrollBar_Style" TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="Margin" Value="0,0,0,3" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<Viewbox Stretch="Fill">
							<RepeatButton x:Name="repeatButtonUp" Content="M 0 8 L 8 8 L 4 0 Z" Command="{x:Static ScrollBar.LineUpCommand}" 
                                          Height="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" 
                                          MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                          Style="{StaticResource Virto_Base_ScrollBarLineButton_Style}"/>
						</Viewbox>

						<Rectangle x:Name="Bd" Fill="{DynamicResource Virto_Scroll_Backround_Brush}" Grid.Row="1" />
						<Track x:Name="PART_Track" IsDirectionReversed="true" Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource Virto_Base_VerticalScrollBar_PageButton_Style}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource Virto_Base_VerticalScrollBar_PageButton_Style}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb x:Name="thumb" Style="{StaticResource Virto_Base_VerticalScrollBar_Thumb_Style}"/>
							</Track.Thumb>
						</Track>
						<Viewbox Grid.Row="2" Stretch="Fill">
							<RepeatButton x:Name="repeatButtonDown" Content="M 0 0 L 4 8 L 8 0 Z" Command="{x:Static ScrollBar.LineDownCommand}" 
                                          Height="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" 
                                          MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                          Style="{StaticResource Virto_Base_ScrollBarLineButton_Style}"/>
						</Viewbox>

						<i:Interaction.Triggers>
							<ei:DataTrigger Binding="{Binding IsDragging, ElementName=thumb, Mode=OneWay}" Value="true">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
							</ei:DataTrigger>
							<ei:DataTrigger Binding="{Binding IsDragging, ElementName=thumb, Mode=OneWay}" Value="false">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
							</ei:DataTrigger>
							<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonUp, Mode=OneWay}" Value="true">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
							</ei:DataTrigger>
							<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonUp, Mode=OneWay}" Value="false">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
							</ei:DataTrigger>
							<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonDown, Mode=OneWay}" Value="true">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
							</ei:DataTrigger>
							<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonDown, Mode=OneWay}" Value="false">
								<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
							</ei:DataTrigger>
						</i:Interaction.Triggers>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="Margin" Value="0,0,0,6" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
									<ColumnDefinition Width="0.00001*"/>
									<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
								</Grid.ColumnDefinitions>

								<Viewbox Stretch="Fill">
									<RepeatButton x:Name="repeatButtonLeft" Content="M8.0000002,0 L8.0000002,1.9229198 2.9999998,5.1277871 8.0000002,8.1729202 8.0000002,10 0,5.1277871 z" 
                                                  Command="{x:Static ScrollBar.LineLeftCommand}" MinHeight="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" 
                                                  Style="{StaticResource Virto_Base_ScrollBarLineButton_Style}" 
                                                  Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
								</Viewbox>
								<Rectangle x:Name="Bd" Grid.Column="1" Fill="{DynamicResource Virto_Scroll_Backround_Brush}" />
								<Track x:Name="PART_Track" Grid.Column="1">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource Virto_Base_HorizontalScrollBar_PageButton_Style}"/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource Virto_Base_HorizontalScrollBar_PageButton_Style}"/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb x:Name="thumb" Style="{StaticResource Virto_Base_HorizontalScrollBar_Thumb_Style}"/>
									</Track.Thumb>
								</Track>
								<Viewbox Grid.Column="2" Stretch="Fill">
									<RepeatButton x:Name="repeatButtonRight" Content="M0,0 L8,4.8722129 0,9.9999998 0,8.07708 5.0000005,4.8722129 0,1.8270798 z" 
                                                  Command="{x:Static ScrollBar.LineRightCommand}" MinHeight="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" 
                                                  Style="{StaticResource Virto_Base_ScrollBarLineButton_Style}" 
                                                  Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
								</Viewbox>

								<i:Interaction.Triggers>
									<ei:DataTrigger Binding="{Binding IsDragging, ElementName=thumb, Mode=OneWay}" Value="true">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
									</ei:DataTrigger>
									<ei:DataTrigger Binding="{Binding IsDragging, ElementName=thumb, Mode=OneWay}" Value="false">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
									</ei:DataTrigger>
									<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonLeft, Mode=OneWay}" Value="true">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
									</ei:DataTrigger>
									<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonLeft, Mode=OneWay}" Value="false">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
									</ei:DataTrigger>
									<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonRight, Mode=OneWay}" Value="true">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Dragging_Backround_Brush}"/>
									</ei:DataTrigger>
									<ei:DataTrigger Binding="{Binding IsPressed, ElementName=repeatButtonRight, Mode=OneWay}" Value="false">
										<ei:ChangePropertyAction TargetObject="{Binding ElementName=Bd}" PropertyName="Fill" Value="{DynamicResource Virto_Scroll_Backround_Brush}"/>
									</ei:DataTrigger>
								</i:Interaction.Triggers>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Virto_Base_ScrollBar_Style}" />
	<!--********* ScrollBar-->

	<!--********* TreeView-->

	<Style x:Key="Virto_Base_TreeViewItem_FocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ExpandCollapseToggle_Style" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Width" Value="19"/>
		<Setter Property="Height" Value="13"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="Transparent" Height="13" Width="19">
						<Path x:Name="ExpandPath"  StrokeLineJoin="Miter" StrokeThickness="1" Data="M 0,0 L 0,9 L 5,4.5 Z" Fill="Black" Margin="1,1,1,1"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Data" TargetName="ExpandPath" Value="M 6,0 L 6,6 L 0,6 Z"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_TreeViewItem_Style" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="1,0,0,0"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource Virto_Base_TreeViewItem_FocusVisualStyle}"/>
		<Setter Property="Foreground" Value="{DynamicResource Virto_TreeView_Foreground_Brush}"/>
		<Setter Property="FontSize" Value="18"/>
		<!--<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Virto_Base_ExpandCollapseToggle_Style}" Margin="2,0,0,0"/>
						<Border x:Name="Hb" Width="Auto" Height="Auto" Grid.ColumnSpan="2" Margin="-200,0,0,0" Panel.ZIndex="-1" Visibility="Hidden" />
						<Border x:Name="Bd" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" 
                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Panel.ZIndex="0" HorizontalAlignment="Stretch" Width="Auto" Cursor="Hand">
							<ContentPresenter x:Name="PART_Header" TextBlock.Foreground="{TemplateBinding Foreground}" TextBlock.FontSize="{TemplateBinding FontSize}"
                                              ContentSource="Header" HorizontalAlignment="Stretch" Width="Auto"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" Width="Auto"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
							<Setter	Property="Background" TargetName="Hb" Value="{DynamicResource Virto_TreeViewItem_MouseOver_Brush}"/>
							<Setter	Property="Visibility" TargetName="Hb" Value="Visible"/>
							<Setter	Property="Foreground" Value="{DynamicResource Virto_TreeView_Selected_Foreground_Brush}"/>
						</Trigger>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter	Property="Background" TargetName="Hb" Value="{DynamicResource Virto_TreeViewItem_Selected_Brush}"/>
							<Setter	Property="Visibility" TargetName="Hb" Value="Visible"/>
							<Setter	Property="Foreground" Value="{DynamicResource Virto_TreeView_Selected_Foreground_Brush}"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="Virto_Base_TreeView_Style" TargetType="{x:Type TreeView}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource Virto_Base_TreeViewItem_Style}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Microsoft_Windows_Themes:ClassicBorderDecorator BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                                                     BorderStyle="Sunken" Background="{TemplateBinding Background}">
						<ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" 
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" 
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
							<ItemsPresenter/>
						</ScrollViewer>
					</Microsoft_Windows_Themes:ClassicBorderDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
							<Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--********* TreeView-->

	<!--********* ListBox-->

	<Style x:Key="Virto_Base_ListBoxItem_Style" TargetType="{x:Type ListBoxItem}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Background" Value="{DynamicResource Virto_ListBoxItem_Background_Brush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_ListBoxItem_Border_Brush}"/>
		<Setter Property="Padding" Value="2,0,0,0"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Bottom"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="Bd" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Margin="{TemplateBinding Margin}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter	Property="Background" TargetName="Bd" Value="{DynamicResource Virto_ListBoxItem_MouseOver_Background_Brush}"/>
							<Setter	Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Virto_ListBoxItem_MouseOver_Border_Brush}"/>
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource Virto_ListBoxItem_IsSelected_Background_Brush}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Virto_ListBoxItem_IsSelected_Border_Brush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_ListBox_Style" TargetType="{x:Type ListBox}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="ItemContainerStyle" Value="{StaticResource Virto_Base_ListBoxItem_Style}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<!--<Setter Property="common:DataGridScrollBehavior.AutoScrollIntoView" Value="True"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<ScrollViewer CanContentScroll="False" Focusable="false" Padding="{TemplateBinding Padding}">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--********* ListBox-->


	<!--********* HeaderedContentBlock-->
	<Style x:Key="Virto_Base_HeaderedContentBlock_Style" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Margin" Value="0,5" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_HeaderedContentControl_ContentBlock_Border_Brush}"/>
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock FontSize="14" Foreground="{DynamicResource Virto_HeaderedContentControl_Hearer_Foreground_Brush}" HorizontalAlignment="Left" Text="{Binding}" 
                               Margin="1,0,0,8" FontWeight="DemiBold" Style="{DynamicResource {x:Type TextBlock}}"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<DockPanel>
						<ContentPresenter DockPanel.Dock="Top" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" />
						<Border Padding="8,0,8,8" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
							<ContentPresenter ContentSource="Content" ContentTemplate="{TemplateBinding ContentTemplate}"/>
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--********* HeaderedContentBlock-->

	<!--DataGrid -->

	<Style x:Key="Virto_Base_GridView_ColumnHeader_Gripper" TargetType="{x:Type Thumb}">
		<Setter Property="Canvas.Right" Value="-9"/>
		<Setter Property="Width" Value="18"/>
		<Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
		<Setter Property="Padding" Value="0,3,0,4"/>
		<Setter Property="Background" Value="{DynamicResource Virto_DataGrid_Gripper_ColumnHeader_Background_Brush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="Transparent">
						<Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--DataGrid Cell-->
	<Style x:Key='Virto_Base_DataGridCell_Style' TargetType="{x:Type DataGridCell}">
		<Setter Property="Foreground" Value="{DynamicResource Virto_DataGridCell_Foreground_Brush}" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Cursor" Value="Arrow" />
		<Setter Property="BorderThickness" Value="1" />
		<!--Padding hack-->
		<Setter Property="Padding" Value="2 5 2 5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Grid x:Name="Root" Background="Transparent">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Rectangle x:Name="FocusVisual" Margin="0,-2,0,0" 
                                   Stroke="{DynamicResource Virto_DataGridCell_FocusVisual_Border_Brush}" Fill="{DynamicResource Virto_DataGridCell_FocusVisual_Background_Brush}" 
                                   Opacity="0" IsHitTestVisible="false"/>
						<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}" Cursor="{TemplateBinding Cursor}">
						</ContentPresenter>
						<Rectangle x:Name="RightGridLine" VerticalAlignment="Stretch" Width="1" Grid.Column="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--DataGrid Row-->
	<Style x:Key='Virto_Base_DataGridRow_Style' TargetType="{x:Type DataGridRow}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border x:Name="DGR_Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True">
						<SelectiveScrollingGrid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height='Auto' />
							</Grid.RowDefinitions>
							<Rectangle x:Name="Selected" Margin="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Opacity="0"
                                   Fill="{DynamicResource Virto_DataGridRow_Selected_Background_Brush}" Stroke="{DynamicResource Virto_DataGridRow_Selected_Border_Brush}"/>
							<Rectangle x:Name="SelectedHighlight" Margin="1" Grid.RowSpan="2" Grid.ColumnSpan="2" Opacity="0" Stroke="{DynamicResource Virto_DataGridRow_SelectedHighlight_Border_Brush}"/>
							<Rectangle x:Name="Over" Margin="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Opacity="0"
                                   Fill="{DynamicResource Virto_DataGridRow_MouseOver_Background_Brush}" 
                                   Stroke="{DynamicResource Virto_DataGridRow_MouseOver_Border_Brush}" />
							<DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							<Rectangle x:Name="BottomGridLine" Grid.Column="1" Grid.Row="2" Height="1" HorizontalAlignment="Stretch" 
                                       Fill="{DynamicResource Virto_DataGridRow_BottomGridLine_Brush}"/>
						</SelectiveScrollingGrid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property='IsSelected' Value='True'>
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Selected" Storyboard.TargetProperty="Opacity" To="0.84"/>
										<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedHighlight" Storyboard.TargetProperty="Opacity" To="1"/>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Selected" Storyboard.TargetProperty="Opacity" To="0"/>
										<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedHighlight" Storyboard.TargetProperty="Opacity" To="0"/>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
							<!--<Setter Property="DetailsVisibility" Value="Visible" />-->
						</Trigger>
						<MultiTrigger >
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsSelected" Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Over" Storyboard.TargetProperty="Opacity" To="0.73"/>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Over" Storyboard.TargetProperty="Opacity" To="0"/>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsFocused" Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Selected" Storyboard.TargetProperty="Opacity" To="0.84"/>
										<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedHighlight" Storyboard.TargetProperty="Opacity" To="1"/>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0" Storyboard.TargetName="Selected" Storyboard.TargetProperty="Opacity" To="0"/>
										<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedHighlight" Storyboard.TargetProperty="Opacity" To="0"/>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--DataGrid Row Header-->
	<Style x:Key='Virto_Base_Path_DataGrid_RowHeaderPath_Style' TargetType='{x:Type Path}' >
		<Setter Property='Margin' Value='6,0,6,0' />
		<Setter Property='Data' Value='M 0,0 L 1.25,1 L 0,2 L 0,0' />
		<Setter Property='Fill' Value='Transparent' />
		<Setter Property='Stretch' Value='Uniform' />
		<Setter Property='RenderTransformOrigin' Value='0,1' />
		<Setter Property='Height' Value='10' />
		<Setter Property='Width' Value='10' />
		<Setter Property='Stroke' Value='Transparent' />
	</Style>

	<!--<DataTemplate x:Key='Virto_RowHeaderContentTemplate'>
        <Path Style='{StaticResource Virto_Base_Path_DataGrid_RowHeaderPath_Style}' />
    </DataTemplate>-->

	<DataTemplate x:Key='Virto_RowHeaderOnDetailsContentTemplate'>
		<Path Style='{StaticResource Virto_Base_Path_DataGrid_RowHeaderPath_Style}'
              Fill='Transparent'
              Stroke='Transparent'>
			<Path.RenderTransform>
				<RotateTransform Angle='45' />
			</Path.RenderTransform>
		</Path>
	</DataTemplate>

	<Style x:Key="Virto_Base_DataGridRowHeader_Style" TargetType='{x:Type DataGridRowHeader}'>
		<Setter Property='Background' Value='Transparent' />
		<Setter Property='BorderThickness' Value="0,0,1,0" />
		<Setter Property='BorderBrush' Value='{DynamicResource Virto_DataGridRowHeader_Border_Brush}' />
		<Setter Property='VerticalAlignment' Value='Top' />
		<Setter Property='Padding' Value='0' />

		<Style.Triggers>
			<DataTrigger Binding='{Binding DetailsVisibility, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}, Mode=FindAncestor}}' Value='Visible'>
				<Setter Property='ContentTemplate' Value='{StaticResource Virto_RowHeaderOnDetailsContentTemplate}' />
			</DataTrigger>
			<DataTrigger Binding='{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}, Mode=FindAncestor}}' Value='False'>
				<Setter Property='Background' Value='{DynamicResource Virto_DataGridRowHeader_MouseOver_Background_Brush}' />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--DataGrid Row Header-->

	<!--DataGrid Column Header-->
	<Style x:Key="Virto_DataGridColumnHeaderGripper_Style" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="8"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Cursor" Value="SizeWE"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key='Virto_Base_DataGridColumnHeader_Style' TargetType='{x:Type DataGridColumnHeader}'>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<!--<Setter Property="FontSize" Value="10.5" />-->
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Padding" Value="4,6,5,6"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="SeparatorBrush" Value="{DynamicResource Virto_DataGridColumnHeader_Separator_Brush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid>
						<Microsoft_Windows_Themes:DataGridHeaderBorder x:Name='HeaderBorder' 
                                                  SortDirection="{TemplateBinding SortDirection}"
                                                  IsHovered="{TemplateBinding IsMouseOver}"
                                                  IsPressed="{TemplateBinding IsPressed}"
                                                  IsClickable="{TemplateBinding CanUserSort}"
                                                  BorderBrush="{DynamicResource Virto_DataGridColumnHeader_Border_Brush}"
                                                  BorderThickness="0,0,1,1"
                                                  Background="{DynamicResource Virto_DataGridColumnHeader_Background_Brush}"
                                                  SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                                  SeparatorBrush="{DynamicResource Virto_DataGridColumnHeader_Border_Brush}">
							<Grid Background='Transparent' >
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width='Auto' />
									<ColumnDefinition Width='*' />
								</Grid.ColumnDefinitions>
								<Rectangle x:Name="BackgroundRectangle" Grid.ColumnSpan="2" Grid.RowSpan="2" Opacity="1" Stretch="Fill" 
                                   Fill ="{DynamicResource Virto_DataGridColumnHeader_Background_Brush}">
								</Rectangle>
								<Rectangle x:Name="HoverRectangle" Grid.ColumnSpan="2" Grid.RowSpan="2" Stretch="Fill"  Opacity="0"
                                   Fill="{DynamicResource Virto_DataGridColumnHeader_MouseOver_Background_Brush}" />
								<Rectangle x:Name="ShineRectangle" Grid.ColumnSpan="2" Grid.RowSpan="2" Stretch="Fill" Opacity="0"
                                   Fill="{DynamicResource Virto_DataGridColumnHeader_Shine_Background_Brush}" 
                                   Stroke="{DynamicResource Virto_DataGridColumnHeader_Shine_Border_Brush}"/>
								<ContentPresenter Grid.Column='0' 
                                                  Grid.ColumnSpan="2"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin='{TemplateBinding Padding}'
                                                  Cursor="{TemplateBinding Cursor}"/>
								<Path   x:Name="SortArrow" Margin="0,2,0,0" Height="4" Width="7" 
                                        Grid.ColumnSpan="2"
                                        HorizontalAlignment="Center" VerticalAlignment="Top"
                                        Stretch="Uniform" Opacity="0" 
                                        Data="F1 M -5.215,6.099L 5.215,6.099L 0,0L -5.215,6.099 Z "                                         
                                        RenderTransformOrigin="0.5,0.5"
                                        Fill="{DynamicResource Virto_DataGridColumnHeader_SortArrow_Brush}">
								</Path>
							</Grid>
						</Microsoft_Windows_Themes:DataGridHeaderBorder>
						<Thumb x:Name="PART_LeftHeaderGripper"
                   HorizontalAlignment="Left"
                   Style="{StaticResource Virto_DataGridColumnHeaderGripper_Style}"/>
						<Thumb x:Name="PART_RightHeaderGripper"
                   HorizontalAlignment="Right"
                   Style="{StaticResource Virto_DataGridColumnHeaderGripper_Style}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter TargetName="SortArrow" Property="Opacity" Value="1" />
							<Setter TargetName="SortArrow" Property="RenderTransform">
								<Setter.Value>
									<RotateTransform Angle="180" />
								</Setter.Value>
							</Setter>
							<Setter TargetName="ShineRectangle" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter TargetName="SortArrow" Property="Opacity" Value="1" />
							<Setter TargetName="ShineRectangle" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger Property='IsMouseOver' Value='True'>
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation BeginTime="00:00:00" 
                                                         Duration="00:00:00.20000"
                                                         Storyboard.TargetName="HoverRectangle" 
                                                         Storyboard.TargetProperty="(UIElement.Opacity)" 
                                                         To='1.0'                                                         
                                                         />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation BeginTime="00:00:00" 
                                                         Duration="00:00:00.20000"
                                                         Storyboard.TargetName="HoverRectangle" 
                                                         Storyboard.TargetProperty="(UIElement.Opacity)" 
                                                         To='0'                                                         
                                                         />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--DataGrid Column Header-->

	<!-- The DataGrid -->
	<Style x:Key="Virto_Base_DataGrid_Style" TargetType='{x:Type DataGrid}'>
		<Setter Property='ScrollViewer.CanContentScroll' Value='True' />
		<Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
		<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property='AutoGenerateColumns' Value='False' />
		<Setter Property="IsTabStop" Value="True" />
		<Setter Property='Foreground' Value='{DynamicResource Virto_DataGrid_Foreground_Brush}' />
		<Setter Property="RowBackground" Value="{DynamicResource Virto_DataGrid_RowBackground_Brush}"/>
		<Setter Property="Background" Value="{DynamicResource Virto_DataGrid_Background_Brush}"/>
		<Setter Property="AlternatingRowBackground" Value="{DynamicResource Virto_DataGrid_AlternatingRowBackground_Brush}"/>
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Virto_DataGrid_HorizontalGridLines_Brush}"/>
		<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Virto_DataGrid_VerticalGridLines_Brush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Virto_DataGrid_Border_Brush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property='GridLinesVisibility' Value='All' />
		<Setter Property='SelectionUnit' Value='FullRow' />
		<Setter Property='SelectionMode' Value='Single' />
		<Setter Property='IsReadOnly' Value='True' />
		<Setter Property='CanUserAddRows' Value='False' />
		<Setter Property='CanUserSortColumns' Value='True' />
		<Setter Property='CanUserResizeRows' Value='True' />
		<Setter Property='IsSynchronizedWithCurrentItem' Value='False'/>
		<Setter Property="EnableRowVirtualization" Value="True" />
		<Setter Property='RowDetailsVisibilityMode' Value='Collapsed' />
		<Setter Property='MinColumnWidth' Value='50' />
		<Setter Property='FontFamily' Value="Resources/Fonts/#segoeui" />
		<!--FontSize hack-->
		<Setter Property='FontSize' Value='14' />
		<Setter Property="common:DataGridScrollBehavior.AutoScrollIntoView" Value="True"/>
	</Style>
	<!--DataGrid -->



	<!--ContexMenu -->
	<Style x:Key="Virto_Base_ContextMenu_Style" TargetType="ContextMenu">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border Background="{DynamicResource Virto_ContextMenu_Background_Brush}" BorderThickness="1"
                            BorderBrush="{DynamicResource Virto_ContextMenu_Border_Background_Brush}">
						<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- MenuItem Style -->
	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border x:Name="LayoutRoot"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
			<Grid x:Name="ContentHost"
                  TextBlock.Foreground="{TemplateBinding Foreground}"
                  TextBlock.FontFamily="{TemplateBinding FontFamily}"
                  TextBlock.FontSize="{TemplateBinding FontSize}"
                  TextBlock.FontStretch="{TemplateBinding FontStretch}"
                  TextBlock.FontStyle="{TemplateBinding FontStyle}"
                  TextBlock.FontWeight="{TemplateBinding FontWeight}"
                  TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                  TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
				<ContentPresenter x:Name="HeaderHost"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				<Popup x:Name="PART_Popup"
                       Grid.IsSharedSizeScope="True"
                       AllowsTransparency="True"
                       Focusable="False"
                       IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSubmenuOpen, Mode=TwoWay}"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=LayoutRoot}"
                       >
					<Border x:Name="PopupRoot"
                            Tag="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"
                            UseLayoutRounding="False"
                            SnapsToDevicePixels="True">
						<Grid>
							<Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=Foreground}"
                                    TextBlock.FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontFamily}"
                                    TextBlock.FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontSize}"
                                    TextBlock.FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStretch}"
                                    TextBlock.FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontStyle}"
                                    TextBlock.FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=FontWeight}"
                                    TextOptions.TextFormattingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextFormattingMode)}"
                                    TextOptions.TextRenderingMode="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(TextOptions.TextRenderingMode)}"
                                    RenderOptions.ClearTypeHint="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuBase}}, Path=(RenderOptions.ClearTypeHint)}"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch">
								<StackPanel IsItemsHost="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
							</Border>
							<Rectangle x:Name="PopupMask"
                                       Fill="{TemplateBinding Background}"
                                       Margin="{TemplateBinding Margin}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Width="{Binding ElementName=ContentHost, Path=ActualWidth}"/>
						</Grid>
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSubmenuOpen" Value="True">
				<Setter TargetName="PART_Popup" Property="IsOpen" Value="True"/>
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
				</MultiTrigger.Setters>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter TargetName="PopupMask" Property="VerticalAlignment" Value="Bottom"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding ElementName=PopupRoot, Path=Tag}" Value="True"/>

				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter TargetName="PopupRoot" Property="Padding" Value="0,0,6,6"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding ElementName=PopupRoot, Path=Tag}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter TargetName="PopupRoot" Property="Padding" Value="0,0,4,0"/>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
		<Border x:Name="LayoutRoot"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                TextBlock.Foreground="{TemplateBinding Foreground}"
                TextBlock.FontFamily="{TemplateBinding FontFamily}"
                TextBlock.FontSize="{TemplateBinding FontSize}"
                TextBlock.FontStretch="{TemplateBinding FontStretch}"
                TextBlock.FontStyle="{TemplateBinding FontStyle}"
                TextBlock.FontWeight="{TemplateBinding FontWeight}"
                TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
			<ContentPresenter x:Name="HeaderHost" Cursor="Hand"
                                ContentSource="Header"
                                RecognizesAccessKey="True"
                                Margin="{TemplateBinding Padding}"/>
		</Border>
	</ControlTemplate>


	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
		<Grid SnapsToDevicePixels="true" >
			<Border x:Name="Bg" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"/>
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
					<ColumnDefinition Width="4"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="37"/>
					<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
					<ColumnDefinition Width="17"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<Border x:Name="GlyphPanel" Background="#E6EFF4" BorderBrush="#CDD3E6" BorderThickness="0"  Margin="1" Visibility="Hidden" Width="22"  Height="22"/>
				<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
				<TextBlock Grid.Column="4" Text="{TemplateBinding InputGestureText}" Margin="{TemplateBinding Padding}" Visibility="Collapsed"/>
				<Path Grid.Column="5" VerticalAlignment="Center" Margin="4,0,0,0" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 0 7 L 4 3.5 Z"/>
			</Grid>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Right" VerticalOffset="0"  HorizontalOffset="2"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Focusable="false"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
				<Border x:Name="Shdw" BorderThickness="1" Margin="0" Background="{DynamicResource Virto_ContextMenu_Background_Brush}" Padding="0" BorderBrush="{DynamicResource Virto_ContextMenu_Border_Background_Brush}">
					<ContentControl x:Name="SubMenuBorder" Padding="0" Margin="0" IsTabStop="false" >
						<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Padding="0" Margin="0"
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
							<StackPanel RenderOptions.ClearTypeHint="Enabled" Background="{DynamicResource Virto_ContextMenu_Background_Brush}">
								<ItemsPresenter x:Name="ItemsPresenter" Margin="0"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Grid.IsSharedSizeScope="true"/>
							</StackPanel>
						</ScrollViewer>
					</ContentControl>
				</Border>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
			</Trigger>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>

			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
				<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
				<Setter TargetName="Shdw" Property="Background" Value="#71000000"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Bg" Property="Background" Value="{DynamicResource Virto_ContextMenu_MouseOver_Background_Brush}"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource Virto_ContextMenu_Disabled_Foreground_Brush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
		<Grid SnapsToDevicePixels="true" Cursor="Hand">
			<Border x:Name="Bg" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
						<ColumnDefinition Width="4"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="37"/>
						<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
						<ColumnDefinition Width="17"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ContentPresenter.Resources>
							<Style TargetType="TextBlock">
								<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=MenuItem}}" />
							</Style>
						</ContentPresenter.Resources>
					</ContentPresenter>
					<TextBlock Grid.Column="4" Text="{TemplateBinding InputGestureText}" Margin="{TemplateBinding Padding}"/>
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Bg" Property="Background" Value="{DynamicResource Virto_ContextMenu_MouseOver_Background_Brush}"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="true">
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{StaticResource Virto_ContextMenu_Disabled_Foreground_Brush}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Virto_Base_MenuItem_Style" TargetType="{x:Type MenuItem}">
		<Setter Property="Foreground" Value="{DynamicResource Virto_MenuItem_Foreground_Brush}"/>
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="2,3"/>
		<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
		<Style.Triggers>
			<Trigger Property="Role" Value="SubmenuHeader">
				<Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--ContexMenu -->


	<!--Separator-->
	<Style x:Key="Virto_Base_VerticalSeparator_Style" TargetType="{x:Type Separator}">
		<Setter Property="Margin" Value="8,4"/>
		<Setter Property="MinHeight" Value="2"/>
		<Setter Property="MinWidth" Value="2"/>
		<Setter Property="Focusable" Value="false"/>
		<!--<Setter Property="Foreground" Value="{DynamicResource Virto_SeparatorLeftLine_Brush}"/>
    <Setter Property="Background" Value="{DynamicResource Virto_SeparatorRightLine_Brush}"/>-->
		<Setter Property="Foreground" Value="{DynamicResource Virto_Separator_Foreground_Brush}"/>
		<Setter Property="Background" Value="{DynamicResource Virto_Separator_Background_Brush}"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Grid x:Name="separator" Margin="{TemplateBinding Padding}">
						<Rectangle Width="1" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left"/>
						<Rectangle Width="1" Fill="{TemplateBinding Background}" HorizontalAlignment="Right"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Virto_Base_HorizontalSeparator_Style" TargetType="{x:Type Separator}">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Margin" Value="0,2"/>
		<Setter Property="Focusable" Value="false"/>
		<!--<Setter Property="Foreground" Value="{DynamicResource Virto_SeparatorLeftLine_Brush}"/>
        <Setter Property="Background" Value="#e8e8e8"/>-->
		<Setter Property="Foreground" Value="{DynamicResource Virto_Separator_Foreground_Brush}"/>
		<Setter Property="Background" Value="{DynamicResource Virto_Separator_Background_Brush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">

					<Rectangle Height="1" Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--Separator-->


	<!--GroupBox-->

	<Style x:Key="Virto_Base_GroupBox_Style" TargetType="GroupBox">

	</Style>

	<!--GroupBox-->
	<!--ItemsControl-->
	<Style x:Key="Virto_Base_ItemsControl_Style" TargetType="ItemsControl">
		<Setter Property="Cursor" Value="Arrow"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>
	<!--ItemsControl-->


	<!--default styles. You can redefine any style in inherited theme -->
	<Style TargetType="ContextMenu" BasedOn="{StaticResource Virto_Base_ContextMenu_Style}"/>
	<Style TargetType="MenuItem" BasedOn="{StaticResource Virto_Base_MenuItem_Style}"/>
	<Style TargetType="TextBlock" BasedOn="{StaticResource Virto_Base_TextBlock_Style}"/>
	<Style TargetType="TextBox" BasedOn="{StaticResource Virto_Base_TextBox_Style}"/>
	<Style TargetType="CheckBox" BasedOn="{StaticResource Virto_Base_CheckBox_Style}"/>
	<Style TargetType="ComboBoxItem" BasedOn="{StaticResource Virto_Base_ComboBoxItem_Style}"/>
	<Style TargetType="ComboBox" BasedOn="{StaticResource Virto_Base_ComboBox_Style}"/>
	<Style TargetType="RadioButton" BasedOn="{StaticResource Virto_Base_RadioButton_Style}"/>
	<Style TargetType="Button" BasedOn="{StaticResource Virto_Base_Button_Style}"/>
	<Style TargetType="DataGrid" BasedOn="{StaticResource Virto_Base_DataGrid_Style}"/>
	<Style TargetType="ListBoxItem" BasedOn="{StaticResource Virto_Base_ListBoxItem_Style}"/>
	<Style TargetType="ListBox" BasedOn="{StaticResource Virto_Base_ListBox_Style}"/>
	<!--<Style TargetType="ListView">
        <Setter Property="common:DataGridScrollBehavior.AutoScrollIntoView" Value="True"/>
    </Style>-->
	<Style TargetType="DatePicker" BasedOn="{StaticResource Virto_Base_DatePicker_Style}"/>
	<Style TargetType="TabItem" BasedOn="{StaticResource Virto_Base_TabItem_Style}"/>
	<Style TargetType="TreeViewItem" BasedOn="{StaticResource Virto_Base_TreeViewItem_Style}"/>
	<Style TargetType="TreeView" BasedOn="{StaticResource Virto_Base_TreeView_Style}"/>
	<Style TargetType="GroupBox" BasedOn="{StaticResource Virto_Base_GroupBox_Style}"/>
	<!--<Style TargetType="PasswordBox" BasedOn="{StaticResource Virto_Base_PasswordBox_Style}"/>-->
	<Style TargetType="PasswordBox" BasedOn="{StaticResource Win8PasswordBoxStyle}"/>
	<Style TargetType="Hyperlink" BasedOn="{StaticResource Virto_Base_Hyperlink_Style}"/>
	<Style TargetType="ItemsControl" BasedOn="{StaticResource Virto_Base_ItemsControl_Style}"/>
	<Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource Virto_Base_DataGridColumnHeader_Style}"/>
	<Style TargetType="DataGridCell" BasedOn="{StaticResource Virto_Base_DataGridCell_Style}"/>
	<Style TargetType="DataGridRow" BasedOn="{StaticResource Virto_Base_DataGridRow_Style}"/>


	<!--default styles-->


</ResourceDictionary>