<UserControl x:Class="VirtoCommerce.ManagementClient.Customers.View.CustomersDetailView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Communication="clr-namespace:VirtoCommerce.ManagementClient.Customers.Infrastructure.Communications"
             xmlns:Converters="clr-namespace:VirtoCommerce.ManagementClient.Customers.Infrastructure.Converters"
             xmlns:CustomersControls="clr-namespace:VirtoCommerce.ManagementClient.Customers.Infrastructure.Controls"
             xmlns:Enumerations="clr-namespace:VirtoCommerce.ManagementClient.Customers.Model.Enumerations"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:core_Converters="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Converters;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:core_DataVirtualization="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.DataVirtualization;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:core_controls="clr-namespace:VirtoCommerce.ManagementClient.Core.Controls;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:core_dialogs="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Dialogs;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:prism="clr-namespace:Microsoft.Practices.Prism.Interactivity.InteractionRequest;assembly=Microsoft.Practices.Prism.Interactivity"
             xmlns:xctk="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             xmlns:common="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Common;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:behaviors="clr-namespace:VirtoCommerce.ManagementClient.Core.Infrastructure.Behaviors;assembly=VirtoCommerce.ManagementClient.Core"
             xmlns:sequrityModel="clr-namespace:VirtoCommerce.Foundation.Security.Model;assembly=VirtoCommerce.Foundation"
             xmlns:behaviors1="clr-namespace:VirtoCommerce.ManagementClient.Customers.Infrastructure.Behaviors"
             Background="{StaticResource Virto_Window_Background_Brush}"
             d:DesignHeight="1000"
             d:DesignWidth="1000"
             mc:Ignorable="d">
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Loaded">
			<i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.LoadCompletedCommand}"/>
		</i:EventTrigger>
	</i:Interaction.Triggers>
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/VirtoCommerce.ManagementClient.Customers;component/View/Views/CommunicationItemNoteTemplate.xaml" />
				<ResourceDictionary Source="/VirtoCommerce.ManagementClient.Customers;component/Resources/CustomersResourceDictionary.xaml" />
				<ResourceDictionary Source="../Resources/CustomersDetailTheme.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<DataTemplate DataType="{x:Type Communication:CommunicationControlViewModel}">
				<Communication:CommunicationControlView DataContext="{Binding}" />
			</DataTemplate>
			<Converters:DynamicFieldPropertyStringConverter x:Key="DynamicFieldPropertyStringConverter"/>
		</ResourceDictionary>

	</UserControl.Resources>
	<FrameworkElement.Style>
		<Style TargetType="UserControl">
			<Setter Property="Padding" Value="50,70,0,0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type UserControl}">
						<Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</FrameworkElement.Style>

	<Grid>
		<i:Interaction.Triggers>
			<prism:InteractionRequestTrigger SourceObject="{Binding DataContext.CustomerDetailViewModel.NotificationInteractionRequest, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
				<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:NotificationLocalModalInteractionDialog}"/>
			</prism:InteractionRequestTrigger>
			<prism:InteractionRequestTrigger SourceObject="{Binding CancelConfirmRequest, Mode=OneWay}">
				<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:AcceptChangesLocalModalInteractionDialog}" />
			</prism:InteractionRequestTrigger>
			<prism:InteractionRequestTrigger SourceObject="{Binding CommonInfoRequest, Mode=OneWay}">
				<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:ConfirmationLocalModalInteractionDialog}"/>
			</prism:InteractionRequestTrigger>
			<prism:InteractionRequestTrigger SourceObject="{Binding SaveConfirmRequest, Mode=OneWay}">
				<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:ConfirmationLocalModalInteractionDialog}" />
			</prism:InteractionRequestTrigger>
			<prism:InteractionRequestTrigger SourceObject="{Binding DataContext.CreateCustomerInteractionRequest, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Mode=OneWay}">
				<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:DisableableLocalModalInteractionDialog}" />
			</prism:InteractionRequestTrigger>
		</i:Interaction.Triggers>

		<UIElement.InputBindings>
			<KeyBinding Command="{Binding SaveChangesCommand}" Key="S" Modifiers="Control" />
			<KeyBinding Command="{Binding CancelCommand}" Key="Escape" />
			<KeyBinding Command="{Binding CancelCommand}" Key="F4" Modifiers="Control" />
		</UIElement.InputBindings>

		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="50" />
		</Grid.RowDefinitions>

		<!--  head toolbar  -->
		<ItemsControl Height="40" Margin="0,0,0,10" HorizontalContentAlignment="Stretch" Style="{StaticResource Virto_ToolbarItemsControl_Style}"
                      Tag="{Binding Path=DataContext.CustomerDetailViewModel, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
			<i:Interaction.Triggers>
				<prism:InteractionRequestTrigger SourceObject="{Binding Tag.SelectStoreRequest, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}">
					<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:DisableableLocalModalInteractionDialog}" />
				</prism:InteractionRequestTrigger>
			</i:Interaction.Triggers>
			<Grid>
				<GroupBox VerticalAlignment="Center" BorderThickness="0">
					<StackPanel Margin="0,3,0,0" VerticalAlignment="Center" Orientation="Horizontal">
						<StackPanel.Resources>
							<Style TargetType="TextBlock" />
						</StackPanel.Resources>
						<RadioButton x:Name="rdbCustomers"
                                     IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsCustomerOptionSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     Template="{StaticResource Virto_Customers_RadioButtonWithoutEllpse_Template}">
							<RadioButton.Content>
								<Grid Margin="3">
									<Border Grid.Column="0" Height="24" VerticalAlignment="Center" Padding="4,2">
										<TextBlock Margin="0,2,0,2" VerticalAlignment="Center"
                                                   FontSize="14" FontWeight="Medium" Foreground="Black"
                                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CustomerDetailViewModel.InnerItem.FullName}" />
									</Border>
								</Grid>
							</RadioButton.Content>

						</RadioButton>

						<RadioButton x:Name="rdbCases"
                                     IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsCaseOptionSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     Template="{StaticResource Virto_Customers_RadioButtonWithoutEllpse_Template}">
							<RadioButton.Content>
								<Grid Margin="3">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<Border Grid.Column="0" Height="24" VerticalAlignment="Center" Padding="4,2"  CornerRadius="5">
										<TextBlock Margin="0,0,0,2" VerticalAlignment="Center"
                                                   FontSize="14" FontWeight="Medium" Foreground="White"
                                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CaseDetailViewModel.InnerItem.Status}" />
										<Border.Style>
											<Style TargetType="Border">
												<Setter Property="Background" Value="Transparent" />
												<Style.Triggers>
													<DataTrigger Binding="{Binding Path=DataContext.CaseDetailViewModel.InnerItem.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Value="Open">
														<Setter Property="Background" Value="DarkRed" />
													</DataTrigger>
													<DataTrigger Binding="{Binding Path=DataContext.CaseDetailViewModel.InnerItem.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Value="Pending">
														<Setter Property="Background" Value="OrangeRed" />
													</DataTrigger>
													<DataTrigger Binding="{Binding Path=DataContext.CaseDetailViewModel.InnerItem.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Value="Resolved">
														<Setter Property="Background" Value="Green" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Border.Style>
									</Border>

									<TextBlock Grid.Column="1" Margin="4,0,0,0" VerticalAlignment="Center" DataContext="{Binding Path=DataContext.CaseDetailViewModel.InnerItem,
                                                                     RelativeSource={RelativeSource Mode=FindAncestor,  AncestorType=UserControl}}"
                                               FontSize="14" Foreground="Black">
                                        <Run FontWeight="Medium" Text="{Binding Path=Title, Mode=OneWay, StringFormat='{}{0} '}" />
                                        <Run Text="{Binding Path=Number, StringFormat='{}#{0}'}" />
									</TextBlock>


								</Grid>
							</RadioButton.Content>
							<RadioButton.Style>
								<Style TargetType="RadioButton">
									<Setter Property="Visibility" Value="Visible"/>
									<Style.Triggers>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CaseActionState}" Value="{x:Static Enumerations:CaseActionState.None}">
											<Setter Property="Visibility" Value="Collapsed"/>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</RadioButton.Style>
						</RadioButton>

					</StackPanel>
				</GroupBox>
			</Grid>
		</ItemsControl>
		<!--  head toolbar  -->

		<!--  content case view  -->
		<Grid Grid.Row="1">
			<Grid.Style>
				<Style TargetType="Grid">
					<Setter Property="Visibility" Value="Hidden" />
					<Style.Triggers>
						<DataTrigger Binding="{Binding Path=DataContext.SelectedDetailViewOption, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Value="{x:Static Enumerations:DetailViewOptions.CaseOptions}">
							<Setter Property="Visibility" Value="Visible" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Style>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>

			<HeaderedContentControl VerticalAlignment="Stretch" Background="{StaticResource Virto_Customers_Detail_Background_Brush}">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition/>
					</Grid.RowDefinitions>
					<ContentControl Content="{Binding Path=CaseDetailViewModel}" IsEnabled="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsReadOnlyActive}" />
					<ItemsControl Grid.Row="1" HorizontalAlignment="Left"  IsEnabled="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsReadOnlyActive}" 
						VerticalContentAlignment="Stretch" Margin="0,4,0,0" Width="300"
                        ItemsSource="{Binding DataContext.CaseCustomFields, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<DataTemplate.Resources>
									<System:String x:Key="additionalPathString">DataContext.CaseDetailViewModel.InnerItem</System:String>
								</DataTemplate.Resources>
								<StackPanel>
									<TextBlock Text="{Binding InnerItem.Name}"  Style="{StaticResource Virto_Customers_TextBlock_Title_Style}"/>

									<core_controls:WatermarkedTextBox x:Name="ctrlShortText" BorderBrush="#B0BBBF"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        Text="{Binding Path=InnerItem.ShortTextValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed">
									</core_controls:WatermarkedTextBox>

									<core_controls:WatermarkedTextBox x:Name="ctrlLongText" BorderBrush="#B0BBBF"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        Style="{StaticResource Virto_Multiline_WatermarkedTextBox_Style}" Height="98" Text="{Binding Path=InnerItem.LongTextValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

									<xctk:DecimalUpDown x:Name="ctrlDecimal" BorderBrush="#B0BBBF"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        Value="{Binding Path=InnerItem.DecimalValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

									<xctk:IntegerUpDown x:Name="ctrlInteger" BorderBrush="#B0BBBF"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        Value="{Binding Path=InnerItem.IntegerValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

									<CheckBox x:Name="ctrlBoolean"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        IsChecked="{Binding Path=InnerItem.BooleanValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

									<DatePicker x:Name="ctrlDataTime"
                                        common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                        SelectedDate="{Binding Path=InnerItem.DateTimeValue, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" Visibility="Collapsed"/>

								</StackPanel>
								<DataTemplate.Triggers>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="0">
										<Setter TargetName="ctrlShortText" Property="Visibility" Value="Visible"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="1">
										<Setter TargetName="ctrlLongText" Property="Visibility" Value="Visible"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="2">
										<Setter TargetName="ctrlDecimal" Property="Visibility" Value="Visible"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="3">
										<Setter TargetName="ctrlInteger" Property="Visibility" Value="Visible"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="4">
										<Setter TargetName="ctrlBoolean" Property="Visibility" Value="Visible"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="5">
										<Setter TargetName="ctrlDataTime" Property="Visibility" Value="Visible"/>
									</DataTrigger>
								</DataTemplate.Triggers>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<DockPanel LastChildFill="False" />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>
						<ItemsControl.ItemContainerStyle>
							<Style TargetType="ContentPresenter">
								<Setter Property="DockPanel.Dock" Value="Top"/>
							</Style>
						</ItemsControl.ItemContainerStyle>
					</ItemsControl>
				</Grid>


			</HeaderedContentControl>


			<HeaderedContentControl Grid.Column="1" VerticalAlignment="Stretch">
				<Grid Margin="-5"  IsEnabled="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsReadOnlyActive}">
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition />
					</Grid.RowDefinitions>

					<!--  TicketTitle  -->
					<Border BorderBrush="LightGray" BorderThickness="0,0,0,1">
						<Grid Grid.Row="0" Background="{StaticResource Virto_Customers_Detail_Background_Brush}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition />
							</Grid.ColumnDefinitions>

							<Rectangle Grid.Column="0" Width="50" Height="50" Margin="10,10,10,0" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="Gray" />

							<Grid Grid.Column="1" Margin="0,10,10,20">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>

								<Grid Grid.Row="0" DataContext="{Binding CaseDetailViewModel}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="auto" MinWidth="200" MaxWidth="300" />
										<ColumnDefinition />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<core_controls:TextBlockTextBoxControl Grid.Column="0" HorizontalAlignment="Stretch" Watermark="Enter case title"
                                        Text="{Binding Path=DataContext.CaseDetailViewModel.InnerItem.Title,
                                                UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
												behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersEditCaseProperties}"
												behaviors:PermissionBehavior.DenyVisibility="Visible" />

									<TextBlock Grid.Column="2" Margin="0,17,0,0" Focusable="True" FontSize="13" Foreground="Blue">
                                        <Run Text="comments" />
                                        <Run Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CaseCommunications.Items.Count, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat='{} ({0})'}" />
									</TextBlock>
									<TextBlock Grid.Column="3" Margin="4,17,0,0" Focusable="True" FontSize="13" Foreground="Blue" Text="events" Visibility="Collapsed" />

								</Grid>


								<StackPanel Grid.Row="1" Margin="0,4,0,0" Orientation="Horizontal">

									<TextBlock Grid.Row="1" Margin="0,2,0,0" VerticalAlignment="Top" DataContext="{Binding Path=CaseDetailViewModel}" FontSize="13"
                                               Text="{Binding Path=InnerItem.LastModified, Converter={x:Static Converters:ModifiedDateToPastTimeConverter.Current}}">
										<TextBlock.Style>
											<Style BasedOn="{StaticResource Virto_Customers_TextBlock_Title_Style}" TargetType="TextBlock" />
										</TextBlock.Style>
									</TextBlock>

									<TextBlock Margin="12,2,6,0" VerticalAlignment="Top" DataContext="{Binding Path=CustomerDetailViewModel}" FontSize="13">
                                        <Run Text="{Binding Path=InnerItem.FullName}" />
										<TextBlock.Style>
											<Style BasedOn="{StaticResource Virto_Customers_TextBlock_Title_Style}" TargetType="TextBlock" />
										</TextBlock.Style>
									</TextBlock>

									<TextBlock Margin="4,2,0,0"
												behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersEditCaseProperties}"
												behaviors:PermissionBehavior.DenyVisibility="Visible" >
                                        <Hyperlink Command="{Binding Path=DataContext.SwitchContactNameEditModeCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
                                            <TextBlock Text="(change)" />
                                        </Hyperlink>
                                    </TextBlock>
								</StackPanel>
							</Grid>

						</Grid>
					</Border>
					<ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
						<ContentControl Grid.Row="1" MinWidth="500" Margin="-5,5,-5,0" Background="Transparent" Content="{Binding CaseCommunications}" />
					</ScrollViewer>
				</Grid>
			</HeaderedContentControl>

			<core_controls:ExpandedTabControl Grid.Column="2" Margin="0,25,0,5" VerticalAlignment="Stretch" Background="Transparent" Padding="0">
				<core_controls:ExpandedTabControl.Resources>
					<SolidColorBrush x:Key="Virto_ExpanderTabControl_Background_Brush" Color="Transparent" />
				</core_controls:ExpandedTabControl.Resources>
				<TabItem>
					<TabItem.Header>
						<core_controls:VectorImage Width="18" Height="18" ImageResource="{StaticResource Icon_Button_Filter}" />
					</TabItem.Header>

					<Border Background="White" BorderBrush="{DynamicResource Virto_HeaderedContentControl_ContentBlock_Border_Brush}" BorderThickness="1">
						<!--Background="{StaticResource Virto_Customers_Detail_Background_Brush}"-->
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<core_controls:MetroButton Grid.Row="0" ToolTip="Refresh list" Width="22" Height="22" HorizontalAlignment="Right" Margin="0,3,3,0"
                                    Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.RefreshContactOrdersPanelCommand}">
								<core_controls:VectorImage Width="14" Height="14" ImageResource="{StaticResource Icon_Button_RefreshList}" />
							</core_controls:MetroButton>

							<ContentControl Grid.Row="1" Margin="3" VerticalAlignment="Stretch" Content="{Binding Path=CustomerDetailViewModel}" Focusable="True" Padding="0" />
						</Grid>
					</Border>
				</TabItem>
			</core_controls:ExpandedTabControl>


			<!--  tabs  -->
			<!--<TabControl Grid.Row="1"
                        Grid.RowSpan="3"
                        Grid.Column="2"
                        Margin="10,0"
                        VerticalAlignment="Top"
                        Style="{StaticResource Virto_TabControlHorizontal_Style}"
                        Visibility="Collapsed">
                <FrameworkElement.Resources>
                    <Style BasedOn="{StaticResource {x:Type core_controls:WatermarkedTextBox}}" TargetType="{x:Type core_controls:WatermarkedTextBox}">
                        <Setter Property="Width" Value="auto" />
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="Margin" Value="2,16,4,2" />
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <DockPanel LastChildFill="True">
                                        <TextBlock DockPanel.Dock="Left" FontSize="12pt" Foreground="Red" Text="!"/>
                                        <Border BorderBrush="Red" BorderThickness="1">
                                            <AdornedElementPlaceholder />
                                        </Border>
                                    </DockPanel>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="true">
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </FrameworkElement.Resources>

                <TabItem Header="Alerts">
                    <DockPanel>
                        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                            <TextBlock>
                                <Run Text="{Binding CaseAlertCurrentPosition, Mode=OneWay}" />
                                <Run Text="/" />
                                <Run Text="{Binding CaseAlertCount, Mode=OneWay}" />
                            </TextBlock>
                            <Button Margin="8,0"
                                    Command="{Binding ShowPreviousAlertCommand}"
                                    Content="Previous Alert" />
                            <Button Command="{Binding ShowNextAlertCommand}" Content="Next Alert" />
                        </StackPanel>
                    
                        <CustomersControls:BindableWebBrowser x:Name="TestWebBrowser" BindableSource="{Binding CaseAlertsView.CurrentItem}" />
                    </DockPanel>
                </TabItem>
                <TabItem Header="Info">
                    <ItemsControl ItemsSource="{Binding CasePropertySets}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <DockPanel LastChildFill="False" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <DockPanel LastChildFill="False">
                                    <FrameworkElement.Resources>
                                        <CollectionViewSource x:Key="CasePropertiesView" Source="{Binding CaseProperties}">
                                            <CollectionViewSource.SortDescriptions>
                                                <scm:SortDescription PropertyName="Priority" />
                                            </CollectionViewSource.SortDescriptions>
                                        </CollectionViewSource>
                                    </FrameworkElement.Resources>
                                    <TextBlock DockPanel.Dock="Top" Text="{Binding Name}" />
                                    <DataGrid DockPanel.Dock="Top"
                                              HeadersVisibility="None"
                                              ItemsSource="{Binding Source={StaticResource CasePropertiesView}}">
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Binding="{Binding Name}" />
                                            <DataGridTextColumn Width="*">
                                                <DataGridTextColumn.Binding>
                                                    <MultiBinding Converter="{x:Static Converters:PathToValueConverter.Current}" FallbackValue="">
                                                        <Binding Path="FieldName" />
                                                        <Binding Path="DataContext.CaseDetailViewModel.InnerItem" RelativeSource="{RelativeSource AncestorType=TabControl}" />
                                                    </MultiBinding>
                                                </DataGridTextColumn.Binding>
                                            </DataGridTextColumn>
                                        </DataGrid.Columns>
                                    </DataGrid>
                                </DockPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </TabItem>

                <TabItem Header="History">
                    <DataGrid x:Name="caseList" ItemsSource="{Binding CustomerCaseList}">
                        <DataGrid.Columns>
                            
                            <DataGridTemplateColumn Width="*" Header="Subject">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock>
                                           
                                            <Hyperlink>
                                                <TextBlock Text="{Binding Title}">
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="MouseLeftButtonDown">
                                                            <i:InvokeCommandAction Command="{Binding DataContext.OpenCaseCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" CommandParameter="{Binding }" />
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                </TextBlock>
                                            </Hyperlink>
                                        </TextBlock>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding Number}" Header="Number" />
                            <DataGridTextColumn Binding="{Binding Created}" Header="Created" />
                            <DataGridTextColumn Binding="{Binding Status}" Header="Status" />
                        </DataGrid.Columns>

                        <DataGrid.RowStyle>
                            <Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="{x:Type DataGridRow}">
                                <Setter Property="inf_behavior:MouseDoubleClickBehavior.DoubleClickCommand" Value="{Binding DataContext.OpenCaseCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" />
                                <Setter Property="inf_behavior:MouseDoubleClickBehavior.CommandArgument" Value="{Binding }" />
                            </Style>
                        </DataGrid.RowStyle>
                    </DataGrid>
                </TabItem>

            </TabControl>-->
			<!--  tabs  -->
		</Grid>
		<!--  content case view  -->

		<!--  content customer view  -->
		<Grid Grid.Row="1" DataContext="{Binding Path=CustomerDetailViewModel}">
			<Grid.Style>
				<Style TargetType="Grid">
					<Setter Property="Visibility" Value="Hidden"/>
					<Style.Triggers>
						<DataTrigger Binding="{Binding Path=DataContext.SelectedDetailViewOption,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Value="{x:Static Enumerations:DetailViewOptions.CustomerOptions}">
							<Setter Property="Visibility" Value="Visible"/>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Style>

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="auto" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>

			<HeaderedContentControl Grid.Column="0" Background="{StaticResource Virto_Customers_Detail_Background_Brush}">
				<ScrollViewer Width="318" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<Button Grid.Row="0" x:Name="btnContOpt" Style="{StaticResource Virto_Customers_ButtonWithTextBlock_Style}" Cursor="Hand" ContextMenuOpening="DisableRightClickContextMenuOpening"
                            Tag="{Binding DataContext.CustomerDetailViewModel, RelativeSource={RelativeSource AncestorType={x:Type UserControl},Mode=FindAncestor}}"
                            DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=UserControl}, Path=DataContext}"
                            ToolTip="Show contact options" Background="Transparent" Margin="6,0,0,0" HorizontalAlignment="Left">
							<DockPanel>
								<core_controls:VectorImage ImageResource="{StaticResource Icon_Button_Plus}" Margin="0,2,5,0" Width="13" Height="13" />
								<TextBlock x:Name="txtContOpt" Text="CONTACT OPTIONS" FontSize="13" VerticalAlignment="Center" FontWeight="DemiBold"
                                    Margin="0,0,0,0" Foreground="Black">
								</TextBlock>
							</DockPanel>

							<Button.ContextMenu>
								<ContextMenu>
									<MenuItem Header="New Case" ToolTip="Create new case"
											  Command="{Binding PlacementTarget.DataContext.CreateNewCaseForCurrentContactCommand,
                                              RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"
                                              behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersCreateNewCase}"
											  behaviors:PermissionBehavior.DenyVisibility="Collapsed"/>

									<MenuItem Command="{Binding Path=PlacementTarget.Tag.CreateLoginPasswordCommand,
                                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                        Header="Create Login/Password" ToolTip="Create login and password for current customer"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
                                                       Path=PlacementTarget.Tag.IsCreateLoginPasswordShow, Delay=2000,
                                                       UpdateSourceTrigger=PropertyChanged, Converter={x:Static core_Converters:ToVisibilityConverter.Current}}"/>

									<MenuItem Command="{Binding Path=PlacementTarget.Tag.LoginOnBehalfCommand,
                                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                        Header="Login on behalf" ToolTip="Login to store on behalf of this customer"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
                                                       Path=PlacementTarget.Tag.IsLoginOnBehalfShow, Converter={x:Static core_Converters:ToVisibilityConverter.Current}}"/>

									<MenuItem Command="{Binding PlacementTarget.Tag.ResetCustomerPasswordCommand,
                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"
                                        Header="Reset Password" ToolTip="Reset customer password"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
                                                       Path=PlacementTarget.Tag.IsResetPasswordShow,Delay=2000, UpdateSourceTrigger=PropertyChanged,
                                                       Converter={x:Static core_Converters:ToVisibilityConverter.Current}}"/>

									<MenuItem Command="{Binding PlacementTarget.Tag.SuspendAccessCommand,
                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"
											Header="Suspend Access" ToolTip="Suspend access"
                                              behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersSuspendAccounts}"
											  behaviors:PermissionBehavior.DenyVisibility="Collapsed">
										<MenuItem.Style>
											<Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
												<Setter Property="Visibility" Value="Visible"/>
												<Style.Triggers>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.None}">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.Restored}">
														<Setter Property="Visibility" Value="Visible"/>
													</DataTrigger>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.Suspended}">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</MenuItem.Style>
									</MenuItem>

									<MenuItem Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
										Path=PlacementTarget.Tag.RestoreAccessCommand}" Header="Restore Access"
											  ToolTip="Restore access"
                                              behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersSuspendAccounts}"
											  behaviors:PermissionBehavior.DenyVisibility="Collapsed">
										<MenuItem.Style>
											<Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
												<Setter Property="Visibility" Value="Visible"/>
												<Style.Triggers>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.None}">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.Suspended}">
														<Setter Property="Visibility" Value="Visible"/>
													</DataTrigger>
													<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu},
														Path=PlacementTarget.Tag.ContactAccessState, Delay=2000}" Value="{x:Static Enumerations:ContactAccessState.Restored}">
														<Setter Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</MenuItem.Style>
									</MenuItem>

									<MenuItem Header="Delete" ToolTip="Delete current customer"
											  Command="{Binding PlacementTarget.DataContext.DeleteCurrentContactCommand,
                                              RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"
                                              behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersDeleteCustomer}"
											  behaviors:PermissionBehavior.DenyVisibility="Collapsed"/>
								</ContextMenu>
							</Button.ContextMenu>
							<i:Interaction.Triggers>
								<i:EventTrigger EventName="Click">
									<ei:ChangePropertyAction PropertyName="PlacementTarget"
                                        TargetObject="{Binding ContextMenu,ElementName=btnContOpt}" Value="{Binding ElementName=btnContOpt,Mode=OneWay}" />
									<ei:ChangePropertyAction PropertyName="Placement"
                                        TargetObject="{Binding ContextMenu,ElementName=btnContOpt}" Value="Bottom" />
									<ei:ChangePropertyAction PropertyName="IsOpen" TargetObject="{Binding ContextMenu, ElementName=btnContOpt}" Value="True" />
								</i:EventTrigger>
							</i:Interaction.Triggers>
						</Button>

						<HeaderedContentControl Grid.Row="1" Width="300" Margin="2" HorizontalAlignment="Left" Background="White">
							<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
								<Grid behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersEditCustomer}"
									  behaviors:PermissionBehavior.DenyVisibility="Visible">
									<i:Interaction.Triggers>
										<prism:InteractionRequestTrigger SourceObject="{Binding DataContext.CustomerDetailViewModel.AddAddressPhoneEmailInteractioNRequest, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}">
											<core_dialogs:InteractionDialogAction DialogType="{x:Type core_dialogs:DisableableLocalModalInteractionDialog}" />
										</prism:InteractionRequestTrigger>
									</i:Interaction.Triggers>
									<Grid.Resources>
										<Style x:Key="lstItemStyleForEmailAndPhones"
                                               BasedOn="{StaticResource {x:Type ListBoxItem}}"
                                               TargetType="{x:Type ListBoxItem}">
											<Setter Property="Padding" Value="0" />
											<Setter Property="Background" Value="White" />
											<Setter Property="BorderBrush" Value="White" />
											<Setter Property="BorderThickness" Value="0" />
											<Setter Property="FontSize" Value="13" />
											<Style.Triggers>
												<Trigger Property="IsSelected" Value="True">
													<Setter Property="Background" Value="White" />
												</Trigger>
											</Style.Triggers>
										</Style>
									</Grid.Resources>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition />
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition/>
									</Grid.ColumnDefinitions>

									<TextBlock Grid.Column="0" Grid.Row="0" Text="Emails" />
									<ListBox Grid.Column="1" Grid.Row="0" Margin="4,8,0,8" x:Name="lstEmails" HorizontalContentAlignment="Stretch" BorderThickness="0" 
                                                 ItemContainerStyle="{StaticResource lstItemStyleForEmailAndPhones}" ItemsSource="{Binding ContactEmails}"
                                                 SelectedItem="{Binding SelectedEmail, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
										<ListBox.ItemTemplate>
											<DataTemplate>
												<Border Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
                                                        Tag="{Binding DataContext.CustomerDetailViewModel, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                            ToolTip="Press to show email options" DataContext="{Binding}">
													<Button x:Name="btnEmails" Style="{StaticResource Virto_Customers_ButtonWithTextBlock_Style}" Margin="0" ContextMenuOpening="DisableRightClickContextMenuOpening" 
                                                            Tag="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Border}, Mode=FindAncestor}}">
														<Button.ContextMenu>
															<ContextMenu Background="Transparent">
																<MenuItem Header="Make primary contact"
																	Command="{Binding PlacementTarget.Tag.MakePrimaryEmailCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"
                                                                    CommandParameter="{Binding Path=PlacementTarget.Tag.SelectedEmail, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType=ContextMenu, Mode=FindAncestor}}"/>
																<MenuItem Header="Edit"
																	Command="{Binding Path=PlacementTarget.Tag.EditEmailCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                                                    CommandParameter="{Binding Path=PlacementTarget.Tag.SelectedEmail,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType=ContextMenu, Mode=FindAncestor}}"/>
																<MenuItem Header="Remove"
																	Command="{Binding PlacementTarget.Tag.RemoveEmailCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},  Mode=FindAncestor}}"
                                                                    CommandParameter="{Binding PlacementTarget.Tag.SelectedEmail,UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}"/>
															</ContextMenu>
														</Button.ContextMenu>
														<Grid Margin="1">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="Auto"/>
																<ColumnDefinition Width="Auto"/>
															</Grid.ColumnDefinitions>
															<TextBlock x:Name="txtEmail" Grid.Column="0" Margin="0" Text="{Binding Address}">
															</TextBlock>
															<Path Grid.Column="1" Fill="Black" Height="4" Width="8" VerticalAlignment="Center"
                                                                  Margin="4,4,0,0">
																<Path.Data>
																	<PathGeometry>
																		<PathFigure StartPoint="0,0">
																			<LineSegment Point="4,4"/>
																			<LineSegment Point="8,0"/>
																		</PathFigure>
																	</PathGeometry>
																</Path.Data>
															</Path>
														</Grid>
														<i:Interaction.Triggers>
															<i:EventTrigger EventName="Click">
																<ei:ChangePropertyAction PropertyName="PlacementTarget"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnEmails}"
                                                                             Value="{Binding ElementName=btnEmails,
                                                                                             Mode=OneWay}" />
																<ei:ChangePropertyAction PropertyName="Placement"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnEmails}"
                                                                             Value="Bottom" />
																<ei:ChangePropertyAction PropertyName="IsOpen"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnEmails}"
                                                                             Value="True" />
															</i:EventTrigger>
														</i:Interaction.Triggers>
													</Button>
													<i:Interaction.Triggers>
														<i:EventTrigger EventName="PreviewMouseLeftButtonDown">
															<ei:ChangePropertyAction PropertyName="SelectedEmail" Value="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"
                                                                                     TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CustomerDetailViewModel}"/>
														</i:EventTrigger>
													</i:Interaction.Triggers>
												</Border>
												<DataTemplate.Triggers>
													<DataTrigger Binding="{Binding Type}" Value="Primary">
														<Setter TargetName="txtEmail" Property="FontWeight" Value="Medium" />
													</DataTrigger>
												</DataTemplate.Triggers>
											</DataTemplate>
										</ListBox.ItemTemplate>
									</ListBox>

									<TextBlock Grid.Column="0" Grid.Row="1" Text="Phone" />
									<ListBox Grid.Column="1" Grid.Row="1" Margin="4,8,0,8"
                                                 HorizontalContentAlignment="Stretch"
                                                 BorderThickness="0"
                                                 ItemContainerStyle="{StaticResource lstItemStyleForEmailAndPhones}"
                                                 ItemsSource="{Binding ContactPhones}"
                                                 SelectedItem="{Binding SelectedPhone,
                                                                        Mode=TwoWay,
                                                                        UpdateSourceTrigger=PropertyChanged}">
										<ListBox.ItemTemplate>
											<DataTemplate>
												<Border Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
                                                            Tag="{Binding DataContext.CustomerDetailViewModel, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                            ToolTip="Press to show phone options">
													<Button x:Name="btnPhones" Style="{StaticResource Virto_Customers_ButtonWithTextBlock_Style}" Margin="0" ContextMenuOpening="DisableRightClickContextMenuOpening"
                                                            Tag="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Border}, Mode=FindAncestor}}">
														<Grid Margin="1">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="Auto"/>
																<ColumnDefinition Width="Auto"/>
															</Grid.ColumnDefinitions>
															<TextBlock Grid.Column="0" Margin="0" x:Name="txtPhone" Text="{Binding Path=Number}"/>
															<Path Grid.Column="1" Fill="Black" Height="4" Width="8" VerticalAlignment="Center"
                                                                  Margin="4,4,0,0">
																<Path.Data>
																	<PathGeometry>
																		<PathFigure StartPoint="0,0">
																			<LineSegment Point="4,4"/>
																			<LineSegment Point="8,0"/>
																		</PathFigure>
																	</PathGeometry>
																</Path.Data>
															</Path>
														</Grid>
														<Button.ContextMenu>
															<ContextMenu>
																<MenuItem Command="{Binding PlacementTarget.Tag.EditPhoneCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedPhone,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Edit" />
																<MenuItem Command="{Binding PlacementTarget.Tag.RemovePhoneCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedPhone,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Remove" />
															</ContextMenu>
														</Button.ContextMenu>
														<i:Interaction.Triggers>
															<i:EventTrigger EventName="Click">
																<ei:ChangePropertyAction PropertyName="PlacementTarget"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnPhones}"
                                                                             Value="{Binding ElementName=btnPhones,
                                                                                             Mode=OneWay}" />
																<ei:ChangePropertyAction PropertyName="Placement"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnPhones}"
                                                                             Value="Bottom" />
																<ei:ChangePropertyAction PropertyName="IsOpen"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnPhones}"
                                                                             Value="True" />
															</i:EventTrigger>
														</i:Interaction.Triggers>
													</Button>
													<i:Interaction.Triggers>
														<i:EventTrigger EventName="PreviewMouseLeftButtonDown">
															<ei:ChangePropertyAction PropertyName="SelectedPhone" Value="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"
                                                                                     TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CustomerDetailViewModel}"/>
														</i:EventTrigger>
													</i:Interaction.Triggers>
												</Border>
											</DataTemplate>
										</ListBox.ItemTemplate>
									</ListBox>

									<TextBlock Grid.Column="0" Grid.Row="2" Text="Addresses" />
									<ListBox Grid.Column="1" Grid.Row="2" Margin="4,8,0,8"
                                                 HorizontalContentAlignment="Stretch"
                                                 BorderThickness="0"
                                                 ItemContainerStyle="{StaticResource lstItemStyleForEmailAndPhones}"
                                                 ItemsSource="{Binding ContactAddresses}"
                                                 SelectedItem="{Binding SelectedAddress,
                                                                        Mode=TwoWay,
                                                                        UpdateSourceTrigger=PropertyChanged}">
										<ListBox.ItemTemplate>
											<DataTemplate>
												<Border Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
                                                            Tag="{Binding DataContext.CustomerDetailViewModel, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                            ToolTip="Press to show address options">
													<Button x:Name="btnAddresses" Style="{StaticResource Virto_Customers_ButtonWithTextBlock_Style}" Margin="0"
                                                             ContextMenuOpening="DisableRightClickContextMenuOpening"
                                                            Tag="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Border}, Mode=FindAncestor}}">
														<Grid Margin="1">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="Auto"/>
																<ColumnDefinition Width="Auto"/>
															</Grid.ColumnDefinitions>
															<Grid.RowDefinitions>
																<RowDefinition Height="Auto"/>
																<RowDefinition Height="Auto"/>
															</Grid.RowDefinitions>
															<TextBlock Grid.Column="0" Grid.Row="0" x:Name="txtAddress">
                                                                    <Run Text="{Binding Path=City}" />
                                                                    <Run Text="{Binding Path=CountryName, TargetNullValue='', FallbackValue='', StringFormat=', {0}'}" />
															</TextBlock>

															<TextBlock Grid.Column="0" Grid.Row="1">
																<Run Text="{Binding Path=Line1, TargetNullValue='',FallbackValue=''}"/>
															</TextBlock>

															<Path Grid.Column="1" Grid.Row="0" Fill="Black" Height="6" Width="10" VerticalAlignment="Center"
                                                                  Margin="4,4,0,0">
																<Path.Data>
																	<PathGeometry>
																		<PathFigure StartPoint="0,0">
																			<LineSegment Point="4,4"/>
																			<LineSegment Point="8,0"/>
																		</PathFigure>
																	</PathGeometry>
																</Path.Data>
															</Path>
														</Grid>
														<Button.ContextMenu>
															<ContextMenu>
																<MenuItem Command="{Binding PlacementTarget.Tag.MakePrimaryAddressCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedAddress,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Make primary address" />
																<MenuItem Command="{Binding PlacementTarget.Tag.MakeBillingAddressCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedAddress,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Make billing address" />
																<MenuItem Command="{Binding PlacementTarget.Tag.MakeShippingAddressCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedAddress,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Make shipping address" />
																<MenuItem Command="{Binding PlacementTarget.Tag.EditAddressCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedAddress,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Edit" />
																<MenuItem Command="{Binding PlacementTarget.Tag.RemoveAddressCommand,
                                                                                                    RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                   Mode=FindAncestor}}"
                                                                                  CommandParameter="{Binding PlacementTarget.Tag.SelectedAddress,
                                                                                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                                                            Mode=FindAncestor}}"
                                                                                  Header="Remove" />
															</ContextMenu>
														</Button.ContextMenu>
														<i:Interaction.Triggers>
															<i:EventTrigger EventName="Click">
																<ei:ChangePropertyAction PropertyName="PlacementTarget"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnAddresses}"
                                                                             Value="{Binding ElementName=btnAddresses,
                                                                                             Mode=OneWay}" />
																<ei:ChangePropertyAction PropertyName="Placement"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnAddresses}"
                                                                             Value="Bottom" />
																<ei:ChangePropertyAction PropertyName="IsOpen"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnAddresses}"
                                                                             Value="True" />
															</i:EventTrigger>
														</i:Interaction.Triggers>
													</Button>
													<i:Interaction.Triggers>
														<i:EventTrigger EventName="PreviewMouseLeftButtonDown">
															<ei:ChangePropertyAction PropertyName="SelectedAddress" Value="{Binding Path=DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}}"
                                                                                     TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.CustomerDetailViewModel}"/>
														</i:EventTrigger>
													</i:Interaction.Triggers>
												</Border>
												<DataTemplate.Triggers>
													<DataTrigger Binding="{Binding Path=Type}" Value="Primary">
														<Setter TargetName="txtAddress" Property="FontWeight" Value="Medium" />
													</DataTrigger>
												</DataTemplate.Triggers>
											</DataTemplate>
										</ListBox.ItemTemplate>
									</ListBox>

									<Button Grid.ColumnSpan="2" Grid.Row="4" x:Name="btnAddCont" Style="{StaticResource Virto_Customers_ButtonWithTextBlock_Style}"
                                                Tag="{Binding DataContext.CustomerDetailViewModel,RelativeSource={RelativeSource AncestorType={x:Type UserControl},
                                                                                                Mode=FindAncestor}}"
                                                Background="Transparent" Margin="0,8,0,4" HorizontalAlignment="Left" ContextMenuOpening="DisableRightClickContextMenuOpening">
										<TextBlock x:Name="txtAddCont" Text="Add Contact" Cursor="Hand" TextDecorations="Underline" Margin="0,0,0,0">
											<TextBlock.Style>
												<Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
													<Setter Property="Foreground" Value="Blue"/>
													<Style.Triggers>
														<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=IsMouseOver}" Value="True">
															<Setter Property="Foreground" Value="LightSkyBlue"/>
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBlock.Style>
										</TextBlock>
										<Button.ContextMenu>
											<ContextMenu  Placement="Bottom">
												<MenuItem Command="{Binding PlacementTarget.Tag.AddAddressCommand,
                                                                                RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                               Mode=FindAncestor}}"
                                                              Header="Add Address"
                                                              ToolTip="Add new address" />
												<MenuItem Command="{Binding PlacementTarget.Tag.AddPhoneCommand,
                                                                                RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                               Mode=FindAncestor}}"
                                                              Header="Add Phone"
                                                              ToolTip="Add new phone number" />
												<MenuItem Command="{Binding PlacementTarget.Tag.AddEmailCommand,
                                                                                RelativeSource={RelativeSource AncestorType={x:Type ContextMenu},
                                                                                                               Mode=FindAncestor}}"
                                                              Header="Add Email"
                                                              ToolTip="Add new email" />
											</ContextMenu>
										</Button.ContextMenu>
										<i:Interaction.Triggers>
											<i:EventTrigger EventName="Click">
												<ei:ChangePropertyAction PropertyName="PlacementTarget"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnAddCont}"
                                                                             Value="{Binding ElementName=btnAddCont,
                                                                                             Mode=OneWay}" />
												<ei:ChangePropertyAction PropertyName="IsOpen"
                                                                             TargetObject="{Binding ContextMenu,
                                                                                                    ElementName=btnAddCont}"
                                                                             Value="True" />
											</i:EventTrigger>
										</i:Interaction.Triggers>
									</Button>

									<StackPanel Grid.Row="5" Grid.ColumnSpan="2">
										<TextBlock Text="Tags" />
										<CustomersControls:TagControl  TagViewModelCollection="{Binding Path=ContactLabelsFromTagControl, UpdateSourceTrigger=PropertyChanged}"/>
									</StackPanel>

									<StackPanel Grid.Row="6" Grid.ColumnSpan="2">
										<TextBlock Text="Language" />
										<ComboBox DisplayMemberPath="DisplayName" BorderBrush="#B0BBBF"
                                                  ItemsSource="{Binding Path=CultureList}"
                                                  SelectedItem="{Binding Path=DefaultSelectedLanguage}" />
									</StackPanel>

									<StackPanel Grid.Row="7" Grid.ColumnSpan="2">
										<TextBlock Text="Time Zone" />
										<ComboBox DisplayMemberPath="DisplayName" BorderBrush="#B0BBBF"
                                                  ItemsSource="{Binding Path=TimeZones, UpdateSourceTrigger=PropertyChanged}"
                                                  SelectedItem="{Binding Path=SelectedTimeZone,
                                                                         UpdateSourceTrigger=PropertyChanged,
                                                                         Mode=TwoWay}" />
									</StackPanel>
								</Grid>
							</ScrollViewer>

						</HeaderedContentControl>

						<StackPanel Grid.Row="2" Width="300" HorizontalAlignment="Left" Margin="2">
							<ItemsControl ItemsSource="{Binding DataContext.ContactCustomFields, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
										      behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersEditCustomer}"
									          behaviors:PermissionBehavior.DenyVisibility="Visible">
								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<DataTemplate.Resources>
											<System:String x:Key="additionalPathString">DataContext.CustomerDetailViewModel.InnerItem</System:String>
										</DataTemplate.Resources>
										<StackPanel>
											<TextBlock Text="{Binding InnerItem.Name}"  Style="{StaticResource Virto_Customers_TextBlock_Title_Style}"/>

											<core_controls:WatermarkedTextBox x:Name="ctrlShortText" BorderBrush="#B0BBBF" IsReadOnly="False"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    Text="{Binding Path=InnerItem.ShortTextValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

											<core_controls:WatermarkedTextBox x:Name="ctrlLongText" BorderBrush="#B0BBBF"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    Style="{StaticResource Virto_Multiline_WatermarkedTextBox_Style}" Height="98" Text="{Binding Path=InnerItem.LongTextValue}" Visibility="Collapsed"/>

											<xctk:DecimalUpDown x:Name="ctrlDecimal" BorderBrush="#B0BBBF"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    Value="{Binding Path=InnerItem.DecimalValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Visibility="Collapsed"/>

											<xctk:IntegerUpDown x:Name="ctrlInteger" BorderBrush="#B0BBBF"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    Value="{Binding Path=InnerItem.IntegerValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, FallbackValue='0', TargetNullValue='0'}" Visibility="Collapsed"/>

											<CheckBox x:Name="ctrlBoolean"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    IsChecked="{Binding Path=InnerItem.BooleanValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay,FallbackValue={x:Static System:Boolean.FalseString}, TargetNullValue={x:Static System:Boolean.FalseString}}" Visibility="Collapsed"/>

											<DatePicker x:Name="ctrlDataTime"
                                                    common:BindingFromStringBehavior.BindingString="{Binding Path=FieldName, Converter={StaticResource DynamicFieldPropertyStringConverter}, ConverterParameter={StaticResource additionalPathString}}"
                                                    SelectedDate="{Binding Path=InnerItem.DateTimeValue, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay, FallbackValue={x:Static System:DateTime.Now}, TargetNullValue={x:Static System:DateTime.Now}}" Visibility="Collapsed"/>

										</StackPanel>
										<DataTemplate.Triggers>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="0">
												<Setter TargetName="ctrlShortText" Property="Visibility" Value="Visible"/>
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="1">
												<Setter TargetName="ctrlLongText" Property="Visibility" Value="Visible"/>
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="2">
												<Setter TargetName="ctrlDecimal" Property="Visibility" Value="Visible"/>
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="3">
												<Setter TargetName="ctrlInteger" Property="Visibility" Value="Visible"/>
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="4">
												<Setter TargetName="ctrlBoolean" Property="Visibility" Value="Visible"/>
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=InnerItem.ValueType}" Value="5">
												<Setter TargetName="ctrlDataTime" Property="Visibility" Value="Visible"/>
											</DataTrigger>
										</DataTemplate.Triggers>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<DockPanel LastChildFill="False" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
								<ItemsControl.ItemContainerStyle>
									<Style TargetType="ContentPresenter">
										<Setter Property="DockPanel.Dock" Value="Top"/>
									</Style>
								</ItemsControl.ItemContainerStyle>
							</ItemsControl>
						</StackPanel>

						<Grid Grid.Row="3" Width="300" HorizontalAlignment="Left" Margin="2">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<StackPanel Grid.Row="0" Orientation="Horizontal">
								<TextBlock Text="Created" />
								<TextBlock Text="{Binding Path=InnerItem.Created}" Foreground="Black"/>
							</StackPanel>

							<StackPanel Grid.Row="1" Orientation="Horizontal">
								<TextBlock Text="Updated" />
								<TextBlock Text="{Binding Path=InnerItem.LastModified}" Foreground="Black"/>
							</StackPanel>

							<StackPanel Grid.Row="2" Orientation="Horizontal">
								<TextBlock Text="Last Login" />
								<TextBlock />
							</StackPanel>

						</Grid>

					</Grid>
				</ScrollViewer>
			</HeaderedContentControl>

			<HeaderedContentControl Grid.Column="1" Background="Transparent">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="0.6*"/>
						<RowDefinition />
					</Grid.RowDefinitions>

					<Grid Grid.Row="0" Margin="10,20,0,0"
                        behaviors:PermissionBehavior.PermissionId="{x:Static sequrityModel:PredefinedPermissions.CustomersEditCustomer}"
                        behaviors:PermissionBehavior.DenyVisibility="Visible">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" MinWidth="200" MaxWidth="300" />
						</Grid.ColumnDefinitions>

						<Border Grid.Column="0" Width="50" Height="50" Margin="10,10,10,0" HorizontalAlignment="Left" Background="Transparent"
                            BorderThickness="1" BorderBrush="#DCDCDC" ToolTip="Click to change photo">
							<Image Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, 
                                Path=DataContext.CustomerDetailViewModel.InnerItem.Photo, UpdateSourceTrigger=PropertyChanged,
                                Converter={x:Static core_Converters:BinaryImageConverter.Current}}">

							</Image>
							<i:Interaction.Triggers>
								<i:EventTrigger EventName="MouseDown">
									<i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl},
                                        Path=DataContext.CustomerDetailViewModel.ChangeContactImageCommand}"/>
								</i:EventTrigger>
							</i:Interaction.Triggers>
						</Border>


						<core_controls:TextBlockTextBoxControl Grid.Column="1" Margin="5,10,10,0" VerticalAlignment="Top"
                            Text="{Binding Path=DataContext.CustomerDetailViewModel.InnerItem.FullName,
                                RelativeSource={RelativeSource AncestorType=UserControl, Mode=FindAncestor},UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                                Watermark="Create contact" />
					</Grid>

					<Grid Grid.Row="1" Margin="10,10,0,0">
						<DataGrid Margin="10,0,0,0" ItemsSource="{Binding ContactCases}">
							<DataGrid.Columns>
								<DataGridTextColumn Width="150"
                                                    Binding="{Binding Number}"
                                                    Header="Id" />
								<DataGridTextColumn Width="200"
                                                    Binding="{Binding Title}"
                                                    Header="Subject" />
								<DataGridTextColumn Width="200"
                                                    Binding="{Binding DataContext.CustomerDetailViewModel.InnerItem.FullName,
                                                                      RelativeSource={RelativeSource AncestorType={x:Type UserControl},
                                                                                                     Mode=FindAncestor}}"
                                                    Header="Customer" />
								<DataGridTextColumn Width="*" Header="Requested" />
								<DataGridTextColumn Width="200"
                                                    Binding="{Binding AgentName}"
                                                    Header="Responsible" />
							</DataGrid.Columns>
							<DataGrid.ColumnHeaderStyle>
								<Style BasedOn="{StaticResource Virto_Base_DataGridColumnHeader_Style}" TargetType="DataGridColumnHeader">
									<Setter Property="FontSize" Value="13" />
									<Setter Property="Height" Value="20" />
									<Setter Property="Padding" Value="3,1" />
								</Style>
							</DataGrid.ColumnHeaderStyle>
							<DataGrid.RowStyle>
								<Style BasedOn="{StaticResource Virto_Base_DataGridRow_Style}" TargetType="DataGridRow">
									<!--  <Setter Property="Height" Value="25"/>  -->
									<Setter Property="Padding" Value="3,1" />
								</Style>
							</DataGrid.RowStyle>
						</DataGrid>
					</Grid>

					<ScrollViewer Grid.Row="2"
                                  HorizontalScrollBarVisibility="Auto"
                                  VerticalScrollBarVisibility="Disabled">
						<ContentControl Grid.Row="1"
                                        MinWidth="500"
                                        Margin="0,10,0,0"
                                        Background="Transparent"
                                        Content="{Binding DataContext.CustomerNotes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" />
					</ScrollViewer>

				</Grid>

			</HeaderedContentControl>

		</Grid>
		<!--  content customer view  -->

		<!--  footer  -->
		<Grid Grid.Row="2"
              Margin="-54,0,-6,-6"
              Background="Black">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="auto" />
			</Grid.ColumnDefinitions>
			<StackPanel Grid.ColumnSpan="2"
                        Height="50"
                        Margin="0,0,6,0"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal">
				<FrameworkElement.Resources>
					<Style BasedOn="{StaticResource {x:Type core_controls:MetroButton}}" TargetType="{x:Type core_controls:MetroButton}">
						<Setter Property="Margin" Value="0,6,14,6" />
						<Setter Property="BorderBrush" Value="Red" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="Padding" Value="4" />
					</Style>
				</FrameworkElement.Resources>
				<core_controls:MetroButton Command="{Binding SaveChangesCommand}" Header="SAVE">
					<core_controls:VectorImage Width="12"
                                               Height="12"
                                               Foreground="#FF00CC5E"
                                               ImageResource="{StaticResource Icon_Button_Submit}" />
				</core_controls:MetroButton>

				<core_controls:MetroButton Command="{Binding ProcessAndSaveCommand}" Header="PROCESS AND SAVE">
					<core_controls:VectorImage Width="12"
                                               Height="12"
                                               Margin="0,1,0,0"
                                               Foreground="White"
                                               ImageResource="{StaticResource Icon_Take_Case}"
                                               Stretch="Fill" />
				</core_controls:MetroButton>

				<core_controls:MetroButton Command="{Binding ResolveAndSaveCommand}" Header="RESOLVE AND SAVE">
					<core_controls:VectorImage Width="12"
                                               Height="12"
                                               Margin="1,0,0,0"
                                               Foreground="White"
                                               ImageResource="{StaticResource Icon_Resolve_Case}"
                                               Stretch="Fill" />
				</core_controls:MetroButton>

				<core_controls:MetroButton Command="{Binding CancelCommand}" Header="CLOSE">
					<core_controls:VectorImage Width="11"
                                               Height="11"
                                               Margin="1,1,0,0"
                                               Foreground="White"
                                               ImageResource="{StaticResource Icon_Button_Close}" />
				</core_controls:MetroButton>
			</StackPanel>
		</Grid>
		<!--  footer  -->

		<core_DataVirtualization:LoadingMetroAnimation Grid.Row="0" AnimationColor="LightSkyBlue" ShowText="True"
                                                  Grid.RowSpan="3" BackgroundColor="#7F000000" AnimationScale="Large"
                                                  Visibility="{Binding ShowLoadingAnimation,
                                                                       Converter={x:Static core_Converters:ToVisibilityConverter.Current}}"
                                                   d:IsHidden="True"/>
	</Grid>
</UserControl>
